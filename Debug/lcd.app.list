
lcd.app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e84  08003e84  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08003e84  08003e84  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e84  08003e84  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08003e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200000d0  08003f5c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003f5c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000feee  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000217c  00000000  00000000  0002ffe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a88  00000000  00000000  00032168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a0  00000000  00000000  00032bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000160f8  00000000  00000000  00033590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009817  00000000  00000000  00049688  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000750e5  00000000  00000000  00052e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7f84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da8  00000000  00000000  000c8000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c00 	.word	0x08003c00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08003c00 	.word	0x08003c00

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fc57 	bl	8000a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 ffb8 	bl	80030dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fc6f 	bl	8000a7a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fc37 	bl	8000a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000068 	.word	0x20000068
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000108 	.word	0x20000108

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000108 	.word	0x20000108

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800025c:	2300      	movs	r3, #0
 800025e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d101      	bne.n	8000276 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000272:	2301      	movs	r3, #1
 8000274:	e0be      	b.n	80003f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000280:	2b00      	cmp	r3, #0
 8000282:	d109      	bne.n	8000298 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f002 ff54 	bl	8003140 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 fab7 	bl	800080c <ADC_ConversionStop_Disable>
 800029e:	4603      	mov	r3, r0
 80002a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002a6:	f003 0310 	and.w	r3, r3, #16
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8099 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	f040 8095 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c0:	f023 0302 	bic.w	r3, r3, #2
 80002c4:	f043 0202 	orr.w	r2, r3, #2
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002ec:	d003      	beq.n	80002f6 <HAL_ADC_Init+0xa2>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d102      	bne.n	80002fc <HAL_ADC_Init+0xa8>
 80002f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fa:	e000      	b.n	80002fe <HAL_ADC_Init+0xaa>
 80002fc:	2300      	movs	r3, #0
 80002fe:	693a      	ldr	r2, [r7, #16]
 8000300:	4313      	orrs	r3, r2
 8000302:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d119      	bne.n	8000340 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d109      	bne.n	8000328 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	3b01      	subs	r3, #1
 800031a:	035a      	lsls	r2, r3, #13
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	4313      	orrs	r3, r2
 8000320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	e00b      	b.n	8000340 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800032c:	f043 0220 	orr.w	r2, r3, #32
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000338:	f043 0201 	orr.w	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	430a      	orrs	r2, r1
 8000352:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <HAL_ADC_Init+0x1a8>)
 800035c:	4013      	ands	r3, r2
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	6812      	ldr	r2, [r2, #0]
 8000362:	68b9      	ldr	r1, [r7, #8]
 8000364:	430b      	orrs	r3, r1
 8000366:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000370:	d003      	beq.n	800037a <HAL_ADC_Init+0x126>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d104      	bne.n	8000384 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	3b01      	subs	r3, #1
 8000380:	051b      	lsls	r3, r3, #20
 8000382:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	430a      	orrs	r2, r1
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <HAL_ADC_Init+0x1ac>)
 80003a0:	4013      	ands	r3, r2
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d10b      	bne.n	80003c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b2:	f023 0303 	bic.w	r3, r3, #3
 80003b6:	f043 0201 	orr.w	r2, r3, #1
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003be:	e018      	b.n	80003f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c4:	f023 0312 	bic.w	r3, r3, #18
 80003c8:	f043 0210 	orr.w	r2, r3, #16
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d4:	f043 0201 	orr.w	r2, r3, #1
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003dc:	2301      	movs	r3, #1
 80003de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e0:	e007      	b.n	80003f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e6:	f043 0210 	orr.w	r2, r3, #16
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003ee:	2301      	movs	r3, #1
 80003f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	ffe1f7fd 	.word	0xffe1f7fd
 8000400:	ff1f0efe 	.word	0xff1f0efe

08000404 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800040c:	2300      	movs	r3, #0
 800040e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000416:	2b01      	cmp	r3, #1
 8000418:	d101      	bne.n	800041e <HAL_ADC_Start+0x1a>
 800041a:	2302      	movs	r3, #2
 800041c:	e098      	b.n	8000550 <HAL_ADC_Start+0x14c>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2201      	movs	r2, #1
 8000422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f000 f99e 	bl	8000768 <ADC_Enable>
 800042c:	4603      	mov	r3, r0
 800042e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	2b00      	cmp	r3, #0
 8000434:	f040 8087 	bne.w	8000546 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000440:	f023 0301 	bic.w	r3, r3, #1
 8000444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a41      	ldr	r2, [pc, #260]	; (8000558 <HAL_ADC_Start+0x154>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d105      	bne.n	8000462 <HAL_ADC_Start+0x5e>
 8000456:	4b41      	ldr	r3, [pc, #260]	; (800055c <HAL_ADC_Start+0x158>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800045e:	2b00      	cmp	r3, #0
 8000460:	d115      	bne.n	800048e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000478:	2b00      	cmp	r3, #0
 800047a:	d026      	beq.n	80004ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000480:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000484:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800048c:	e01d      	b.n	80004ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a2f      	ldr	r2, [pc, #188]	; (800055c <HAL_ADC_Start+0x158>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d004      	beq.n	80004ae <HAL_ADC_Start+0xaa>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a2b      	ldr	r2, [pc, #172]	; (8000558 <HAL_ADC_Start+0x154>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d10d      	bne.n	80004ca <HAL_ADC_Start+0xc6>
 80004ae:	4b2b      	ldr	r3, [pc, #172]	; (800055c <HAL_ADC_Start+0x158>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d007      	beq.n	80004ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d006      	beq.n	80004e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004da:	f023 0206 	bic.w	r2, r3, #6
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e2:	e002      	b.n	80004ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f06f 0202 	mvn.w	r2, #2
 80004fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000506:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800050a:	d113      	bne.n	8000534 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <HAL_ADC_Start+0x154>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d105      	bne.n	8000522 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_ADC_Start+0x158>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800051e:	2b00      	cmp	r3, #0
 8000520:	d108      	bne.n	8000534 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	689a      	ldr	r2, [r3, #8]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	e00c      	b.n	800054e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	e003      	b.n	800054e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40012800 	.word	0x40012800
 800055c:	40012400 	.word	0x40012400

08000560 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000590:	2b01      	cmp	r3, #1
 8000592:	d101      	bne.n	8000598 <HAL_ADC_ConfigChannel+0x20>
 8000594:	2302      	movs	r3, #2
 8000596:	e0dc      	b.n	8000752 <HAL_ADC_ConfigChannel+0x1da>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	2b06      	cmp	r3, #6
 80005a6:	d81c      	bhi.n	80005e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	4613      	mov	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	3b05      	subs	r3, #5
 80005ba:	221f      	movs	r2, #31
 80005bc:	fa02 f303 	lsl.w	r3, r2, r3
 80005c0:	43db      	mvns	r3, r3
 80005c2:	4019      	ands	r1, r3
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	4613      	mov	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	3b05      	subs	r3, #5
 80005d4:	fa00 f203 	lsl.w	r2, r0, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	430a      	orrs	r2, r1
 80005de:	635a      	str	r2, [r3, #52]	; 0x34
 80005e0:	e03c      	b.n	800065c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2b0c      	cmp	r3, #12
 80005e8:	d81c      	bhi.n	8000624 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	4613      	mov	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4413      	add	r3, r2
 80005fa:	3b23      	subs	r3, #35	; 0x23
 80005fc:	221f      	movs	r2, #31
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	43db      	mvns	r3, r3
 8000604:	4019      	ands	r1, r3
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	4613      	mov	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	3b23      	subs	r3, #35	; 0x23
 8000616:	fa00 f203 	lsl.w	r2, r0, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	430a      	orrs	r2, r1
 8000620:	631a      	str	r2, [r3, #48]	; 0x30
 8000622:	e01b      	b.n	800065c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685a      	ldr	r2, [r3, #4]
 800062e:	4613      	mov	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4413      	add	r3, r2
 8000634:	3b41      	subs	r3, #65	; 0x41
 8000636:	221f      	movs	r2, #31
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	43db      	mvns	r3, r3
 800063e:	4019      	ands	r1, r3
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	4613      	mov	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	3b41      	subs	r3, #65	; 0x41
 8000650:	fa00 f203 	lsl.w	r2, r0, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	430a      	orrs	r2, r1
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b09      	cmp	r3, #9
 8000662:	d91c      	bls.n	800069e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68d9      	ldr	r1, [r3, #12]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4613      	mov	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4413      	add	r3, r2
 8000674:	3b1e      	subs	r3, #30
 8000676:	2207      	movs	r2, #7
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	43db      	mvns	r3, r3
 800067e:	4019      	ands	r1, r3
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	6898      	ldr	r0, [r3, #8]
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	3b1e      	subs	r3, #30
 8000690:	fa00 f203 	lsl.w	r2, r0, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	430a      	orrs	r2, r1
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	e019      	b.n	80006d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	6919      	ldr	r1, [r3, #16]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	2207      	movs	r2, #7
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	43db      	mvns	r3, r3
 80006b6:	4019      	ands	r1, r3
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	6898      	ldr	r0, [r3, #8]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	fa00 f203 	lsl.w	r2, r0, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	430a      	orrs	r2, r1
 80006d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b10      	cmp	r3, #16
 80006d8:	d003      	beq.n	80006e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006de:	2b11      	cmp	r3, #17
 80006e0:	d132      	bne.n	8000748 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a1d      	ldr	r2, [pc, #116]	; (800075c <HAL_ADC_ConfigChannel+0x1e4>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d125      	bne.n	8000738 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d126      	bne.n	8000748 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000708:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b10      	cmp	r3, #16
 8000710:	d11a      	bne.n	8000748 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <HAL_ADC_ConfigChannel+0x1e8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a13      	ldr	r2, [pc, #76]	; (8000764 <HAL_ADC_ConfigChannel+0x1ec>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0c9a      	lsrs	r2, r3, #18
 800071e:	4613      	mov	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4413      	add	r3, r2
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000728:	e002      	b.n	8000730 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	3b01      	subs	r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1f9      	bne.n	800072a <HAL_ADC_ConfigChannel+0x1b2>
 8000736:	e007      	b.n	8000748 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073c:	f043 0220 	orr.w	r2, r3, #32
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	40012400 	.word	0x40012400
 8000760:	20000068 	.word	0x20000068
 8000764:	431bde83 	.word	0x431bde83

08000768 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	2b01      	cmp	r3, #1
 8000784:	d039      	beq.n	80007fa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	689a      	ldr	r2, [r3, #8]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f042 0201 	orr.w	r2, r2, #1
 8000794:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <ADC_Enable+0x9c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <ADC_Enable+0xa0>)
 800079c:	fba2 2303 	umull	r2, r3, r2, r3
 80007a0:	0c9b      	lsrs	r3, r3, #18
 80007a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80007a4:	e002      	b.n	80007ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f9      	bne.n	80007a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80007b2:	f7ff fd23 	bl	80001fc <HAL_GetTick>
 80007b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80007b8:	e018      	b.n	80007ec <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80007ba:	f7ff fd1f 	bl	80001fc <HAL_GetTick>
 80007be:	4602      	mov	r2, r0
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d911      	bls.n	80007ec <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007cc:	f043 0210 	orr.w	r2, r3, #16
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d8:	f043 0201 	orr.w	r2, r3, #1
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80007e8:	2301      	movs	r3, #1
 80007ea:	e007      	b.n	80007fc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d1df      	bne.n	80007ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000068 	.word	0x20000068
 8000808:	431bde83 	.word	0x431bde83

0800080c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	2b01      	cmp	r3, #1
 8000824:	d127      	bne.n	8000876 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f022 0201 	bic.w	r2, r2, #1
 8000834:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000836:	f7ff fce1 	bl	80001fc <HAL_GetTick>
 800083a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800083c:	e014      	b.n	8000868 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800083e:	f7ff fcdd 	bl	80001fc <HAL_GetTick>
 8000842:	4602      	mov	r2, r0
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	2b02      	cmp	r3, #2
 800084a:	d90d      	bls.n	8000868 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000850:	f043 0210 	orr.w	r2, r3, #16
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085c:	f043 0201 	orr.w	r2, r3, #1
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000864:	2301      	movs	r3, #1
 8000866:	e007      	b.n	8000878 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b01      	cmp	r3, #1
 8000874:	d0e3      	beq.n	800083e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <NVIC_SetPriorityGrouping+0x44>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <NVIC_SetPriorityGrouping+0x44>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <NVIC_EnableIRQ+0x2c>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100

08000914 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	da0b      	bge.n	8000940 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	490c      	ldr	r1, [pc, #48]	; (8000960 <NVIC_SetPriority+0x4c>)
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 030f 	and.w	r3, r3, #15
 8000934:	3b04      	subs	r3, #4
 8000936:	0112      	lsls	r2, r2, #4
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	440b      	add	r3, r1
 800093c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800093e:	e009      	b.n	8000954 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <NVIC_SetPriority+0x50>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00
 8000964:	e000e100 	.word	0xe000e100

08000968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f1c3 0307 	rsb	r3, r3, #7
 8000982:	2b04      	cmp	r3, #4
 8000984:	bf28      	it	cs
 8000986:	2304      	movcs	r3, #4
 8000988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3304      	adds	r3, #4
 800098e:	2b06      	cmp	r3, #6
 8000990:	d902      	bls.n	8000998 <NVIC_EncodePriority+0x30>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3b03      	subs	r3, #3
 8000996:	e000      	b.n	800099a <NVIC_EncodePriority+0x32>
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	f04f 32ff 	mov.w	r2, #4294967295
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43d9      	mvns	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	4313      	orrs	r3, r2
         );
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3724      	adds	r7, #36	; 0x24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009dc:	d301      	bcc.n	80009e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2301      	movs	r3, #1
 80009e0:	e00f      	b.n	8000a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <SysTick_Config+0x40>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ea:	210f      	movs	r1, #15
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f7ff ff90 	bl	8000914 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <SysTick_Config+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SysTick_Config+0x40>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff31 	bl	8000880 <NVIC_SetPriorityGrouping>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff46 	bl	80008c8 <NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ff90 	bl	8000968 <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff5f 	bl	8000914 <NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff39 	bl	80008e4 <NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffa2 	bl	80009cc <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b08b      	sub	sp, #44	; 0x2c
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab6:	e127      	b.n	8000d08 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	69fa      	ldr	r2, [r7, #28]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	f040 8116 	bne.w	8000d02 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	2b12      	cmp	r3, #18
 8000adc:	d034      	beq.n	8000b48 <HAL_GPIO_Init+0xb4>
 8000ade:	2b12      	cmp	r3, #18
 8000ae0:	d80d      	bhi.n	8000afe <HAL_GPIO_Init+0x6a>
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d02b      	beq.n	8000b3e <HAL_GPIO_Init+0xaa>
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d804      	bhi.n	8000af4 <HAL_GPIO_Init+0x60>
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d031      	beq.n	8000b52 <HAL_GPIO_Init+0xbe>
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d01c      	beq.n	8000b2c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000af2:	e048      	b.n	8000b86 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d043      	beq.n	8000b80 <HAL_GPIO_Init+0xec>
 8000af8:	2b11      	cmp	r3, #17
 8000afa:	d01b      	beq.n	8000b34 <HAL_GPIO_Init+0xa0>
          break;
 8000afc:	e043      	b.n	8000b86 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000afe:	4a87      	ldr	r2, [pc, #540]	; (8000d1c <HAL_GPIO_Init+0x288>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d026      	beq.n	8000b52 <HAL_GPIO_Init+0xbe>
 8000b04:	4a85      	ldr	r2, [pc, #532]	; (8000d1c <HAL_GPIO_Init+0x288>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d806      	bhi.n	8000b18 <HAL_GPIO_Init+0x84>
 8000b0a:	4a85      	ldr	r2, [pc, #532]	; (8000d20 <HAL_GPIO_Init+0x28c>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d020      	beq.n	8000b52 <HAL_GPIO_Init+0xbe>
 8000b10:	4a84      	ldr	r2, [pc, #528]	; (8000d24 <HAL_GPIO_Init+0x290>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d01d      	beq.n	8000b52 <HAL_GPIO_Init+0xbe>
          break;
 8000b16:	e036      	b.n	8000b86 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000b18:	4a83      	ldr	r2, [pc, #524]	; (8000d28 <HAL_GPIO_Init+0x294>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d019      	beq.n	8000b52 <HAL_GPIO_Init+0xbe>
 8000b1e:	4a83      	ldr	r2, [pc, #524]	; (8000d2c <HAL_GPIO_Init+0x298>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d016      	beq.n	8000b52 <HAL_GPIO_Init+0xbe>
 8000b24:	4a82      	ldr	r2, [pc, #520]	; (8000d30 <HAL_GPIO_Init+0x29c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d013      	beq.n	8000b52 <HAL_GPIO_Init+0xbe>
          break;
 8000b2a:	e02c      	b.n	8000b86 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	623b      	str	r3, [r7, #32]
          break;
 8000b32:	e028      	b.n	8000b86 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	623b      	str	r3, [r7, #32]
          break;
 8000b3c:	e023      	b.n	8000b86 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	3308      	adds	r3, #8
 8000b44:	623b      	str	r3, [r7, #32]
          break;
 8000b46:	e01e      	b.n	8000b86 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	330c      	adds	r3, #12
 8000b4e:	623b      	str	r3, [r7, #32]
          break;
 8000b50:	e019      	b.n	8000b86 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	623b      	str	r3, [r7, #32]
          break;
 8000b5e:	e012      	b.n	8000b86 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d105      	bne.n	8000b74 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69fa      	ldr	r2, [r7, #28]
 8000b70:	611a      	str	r2, [r3, #16]
          break;
 8000b72:	e008      	b.n	8000b86 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b74:	2308      	movs	r3, #8
 8000b76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69fa      	ldr	r2, [r7, #28]
 8000b7c:	615a      	str	r2, [r3, #20]
          break;
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	2bff      	cmp	r3, #255	; 0xff
 8000b8a:	d801      	bhi.n	8000b90 <HAL_GPIO_Init+0xfc>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	e001      	b.n	8000b94 <HAL_GPIO_Init+0x100>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3304      	adds	r3, #4
 8000b94:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	2bff      	cmp	r3, #255	; 0xff
 8000b9a:	d802      	bhi.n	8000ba2 <HAL_GPIO_Init+0x10e>
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	e002      	b.n	8000ba8 <HAL_GPIO_Init+0x114>
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	3b08      	subs	r3, #8
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	210f      	movs	r1, #15
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	401a      	ands	r2, r3
 8000bba:	6a39      	ldr	r1, [r7, #32]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 8096 	beq.w	8000d02 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd6:	4b57      	ldr	r3, [pc, #348]	; (8000d34 <HAL_GPIO_Init+0x2a0>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4a56      	ldr	r2, [pc, #344]	; (8000d34 <HAL_GPIO_Init+0x2a0>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6193      	str	r3, [r2, #24]
 8000be2:	4b54      	ldr	r3, [pc, #336]	; (8000d34 <HAL_GPIO_Init+0x2a0>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000bee:	4a52      	ldr	r2, [pc, #328]	; (8000d38 <HAL_GPIO_Init+0x2a4>)
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfa:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	220f      	movs	r2, #15
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a49      	ldr	r2, [pc, #292]	; (8000d3c <HAL_GPIO_Init+0x2a8>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d013      	beq.n	8000c42 <HAL_GPIO_Init+0x1ae>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a48      	ldr	r2, [pc, #288]	; (8000d40 <HAL_GPIO_Init+0x2ac>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d00d      	beq.n	8000c3e <HAL_GPIO_Init+0x1aa>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a47      	ldr	r2, [pc, #284]	; (8000d44 <HAL_GPIO_Init+0x2b0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d007      	beq.n	8000c3a <HAL_GPIO_Init+0x1a6>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a46      	ldr	r2, [pc, #280]	; (8000d48 <HAL_GPIO_Init+0x2b4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d101      	bne.n	8000c36 <HAL_GPIO_Init+0x1a2>
 8000c32:	2303      	movs	r3, #3
 8000c34:	e006      	b.n	8000c44 <HAL_GPIO_Init+0x1b0>
 8000c36:	2304      	movs	r3, #4
 8000c38:	e004      	b.n	8000c44 <HAL_GPIO_Init+0x1b0>
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	e002      	b.n	8000c44 <HAL_GPIO_Init+0x1b0>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <HAL_GPIO_Init+0x1b0>
 8000c42:	2300      	movs	r3, #0
 8000c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c46:	f002 0203 	and.w	r2, r2, #3
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	4093      	lsls	r3, r2
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000c54:	4938      	ldr	r1, [pc, #224]	; (8000d38 <HAL_GPIO_Init+0x2a4>)
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d006      	beq.n	8000c7c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c6e:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4936      	ldr	r1, [pc, #216]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c7c:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	4931      	ldr	r1, [pc, #196]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d006      	beq.n	8000ca4 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c96:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	492c      	ldr	r1, [pc, #176]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	604b      	str	r3, [r1, #4]
 8000ca2:	e006      	b.n	8000cb2 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	4927      	ldr	r1, [pc, #156]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cbe:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	4922      	ldr	r1, [pc, #136]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	608b      	str	r3, [r1, #8]
 8000cca:	e006      	b.n	8000cda <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	491d      	ldr	r1, [pc, #116]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d006      	beq.n	8000cf4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	4918      	ldr	r1, [pc, #96]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	60cb      	str	r3, [r1, #12]
 8000cf2:	e006      	b.n	8000d02 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	4913      	ldr	r1, [pc, #76]	; (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	3301      	adds	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	f67f aed4 	bls.w	8000ab8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000d10:	bf00      	nop
 8000d12:	372c      	adds	r7, #44	; 0x2c
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	10210000 	.word	0x10210000
 8000d20:	10110000 	.word	0x10110000
 8000d24:	10120000 	.word	0x10120000
 8000d28:	10310000 	.word	0x10310000
 8000d2c:	10320000 	.word	0x10320000
 8000d30:	10220000 	.word	0x10220000
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	40010800 	.word	0x40010800
 8000d40:	40010c00 	.word	0x40010c00
 8000d44:	40011000 	.word	0x40011000
 8000d48:	40011400 	.word	0x40011400
 8000d4c:	40010400 	.word	0x40010400

08000d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	4013      	ands	r3, r2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e001      	b.n	8000d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	460b      	mov	r3, r1
 8000d88:	807b      	strh	r3, [r7, #2]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d8e:	787b      	ldrb	r3, [r7, #1]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d94:	887a      	ldrh	r2, [r7, #2]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000d9a:	e003      	b.n	8000da4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d9c:	887b      	ldrh	r3, [r7, #2]
 8000d9e:	041a      	lsls	r2, r3, #16
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	611a      	str	r2, [r3, #16]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	405a      	eors	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60da      	str	r2, [r3, #12]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 8087 	beq.w	8000ef8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dea:	4b92      	ldr	r3, [pc, #584]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d00c      	beq.n	8000e10 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000df6:	4b8f      	ldr	r3, [pc, #572]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d112      	bne.n	8000e28 <HAL_RCC_OscConfig+0x58>
 8000e02:	4b8c      	ldr	r3, [pc, #560]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0e:	d10b      	bne.n	8000e28 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e10:	4b88      	ldr	r3, [pc, #544]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d06c      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x126>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d168      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e22d      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e30:	d106      	bne.n	8000e40 <HAL_RCC_OscConfig+0x70>
 8000e32:	4b80      	ldr	r3, [pc, #512]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a7f      	ldr	r2, [pc, #508]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e02e      	b.n	8000e9e <HAL_RCC_OscConfig+0xce>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10c      	bne.n	8000e62 <HAL_RCC_OscConfig+0x92>
 8000e48:	4b7a      	ldr	r3, [pc, #488]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a79      	ldr	r2, [pc, #484]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b77      	ldr	r3, [pc, #476]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a76      	ldr	r2, [pc, #472]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e01d      	b.n	8000e9e <HAL_RCC_OscConfig+0xce>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e6a:	d10c      	bne.n	8000e86 <HAL_RCC_OscConfig+0xb6>
 8000e6c:	4b71      	ldr	r3, [pc, #452]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a70      	ldr	r2, [pc, #448]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	4b6e      	ldr	r3, [pc, #440]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a6d      	ldr	r2, [pc, #436]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e00b      	b.n	8000e9e <HAL_RCC_OscConfig+0xce>
 8000e86:	4b6b      	ldr	r3, [pc, #428]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a6a      	ldr	r2, [pc, #424]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b68      	ldr	r3, [pc, #416]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a67      	ldr	r2, [pc, #412]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d013      	beq.n	8000ece <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea6:	f7ff f9a9 	bl	80001fc <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eac:	e008      	b.n	8000ec0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eae:	f7ff f9a5 	bl	80001fc <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b64      	cmp	r3, #100	; 0x64
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e1e1      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec0:	4b5c      	ldr	r3, [pc, #368]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0f0      	beq.n	8000eae <HAL_RCC_OscConfig+0xde>
 8000ecc:	e014      	b.n	8000ef8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff f995 	bl	80001fc <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed6:	f7ff f991 	bl	80001fc <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b64      	cmp	r3, #100	; 0x64
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e1cd      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee8:	4b52      	ldr	r3, [pc, #328]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x106>
 8000ef4:	e000      	b.n	8000ef8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d063      	beq.n	8000fcc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f04:	4b4b      	ldr	r3, [pc, #300]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 030c 	and.w	r3, r3, #12
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00b      	beq.n	8000f28 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f10:	4b48      	ldr	r3, [pc, #288]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 030c 	and.w	r3, r3, #12
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d11c      	bne.n	8000f56 <HAL_RCC_OscConfig+0x186>
 8000f1c:	4b45      	ldr	r3, [pc, #276]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d116      	bne.n	8000f56 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f28:	4b42      	ldr	r3, [pc, #264]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <HAL_RCC_OscConfig+0x170>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d001      	beq.n	8000f40 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e1a1      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f40:	4b3c      	ldr	r3, [pc, #240]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	4939      	ldr	r1, [pc, #228]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000f50:	4313      	orrs	r3, r2
 8000f52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f54:	e03a      	b.n	8000fcc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d020      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f5e:	4b36      	ldr	r3, [pc, #216]	; (8001038 <HAL_RCC_OscConfig+0x268>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff f94a 	bl	80001fc <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f6c:	f7ff f946 	bl	80001fc <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e182      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4926      	ldr	r1, [pc, #152]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
 8000f9e:	e015      	b.n	8000fcc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <HAL_RCC_OscConfig+0x268>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff f929 	bl	80001fc <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff f925 	bl	80001fc <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e161      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f0      	bne.n	8000fae <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d039      	beq.n	800104c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d019      	beq.n	8001014 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe6:	f7ff f909 	bl	80001fc <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fee:	f7ff f905 	bl	80001fc <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e141      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_RCC_OscConfig+0x264>)
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800100c:	2001      	movs	r0, #1
 800100e:	f000 fab1 	bl	8001574 <RCC_Delay>
 8001012:	e01b      	b.n	800104c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_RCC_OscConfig+0x26c>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101a:	f7ff f8ef 	bl	80001fc <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001020:	e00e      	b.n	8001040 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001022:	f7ff f8eb 	bl	80001fc <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d907      	bls.n	8001040 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e127      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
 8001034:	40021000 	.word	0x40021000
 8001038:	42420000 	.word	0x42420000
 800103c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001040:	4b92      	ldr	r3, [pc, #584]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1ea      	bne.n	8001022 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80a6 	beq.w	80011a6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800105e:	4b8b      	ldr	r3, [pc, #556]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10d      	bne.n	8001086 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b88      	ldr	r3, [pc, #544]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a87      	ldr	r2, [pc, #540]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b85      	ldr	r3, [pc, #532]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001082:	2301      	movs	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001086:	4b82      	ldr	r3, [pc, #520]	; (8001290 <HAL_RCC_OscConfig+0x4c0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108e:	2b00      	cmp	r3, #0
 8001090:	d118      	bne.n	80010c4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001092:	4b7f      	ldr	r3, [pc, #508]	; (8001290 <HAL_RCC_OscConfig+0x4c0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a7e      	ldr	r2, [pc, #504]	; (8001290 <HAL_RCC_OscConfig+0x4c0>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800109e:	f7ff f8ad 	bl	80001fc <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a6:	f7ff f8a9 	bl	80001fc <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b64      	cmp	r3, #100	; 0x64
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e0e5      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b8:	4b75      	ldr	r3, [pc, #468]	; (8001290 <HAL_RCC_OscConfig+0x4c0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x30a>
 80010cc:	4b6f      	ldr	r3, [pc, #444]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a6e      	ldr	r2, [pc, #440]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6213      	str	r3, [r2, #32]
 80010d8:	e02d      	b.n	8001136 <HAL_RCC_OscConfig+0x366>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x32c>
 80010e2:	4b6a      	ldr	r3, [pc, #424]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a69      	ldr	r2, [pc, #420]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a66      	ldr	r2, [pc, #408]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 80010f4:	f023 0304 	bic.w	r3, r3, #4
 80010f8:	6213      	str	r3, [r2, #32]
 80010fa:	e01c      	b.n	8001136 <HAL_RCC_OscConfig+0x366>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b05      	cmp	r3, #5
 8001102:	d10c      	bne.n	800111e <HAL_RCC_OscConfig+0x34e>
 8001104:	4b61      	ldr	r3, [pc, #388]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a60      	ldr	r2, [pc, #384]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6213      	str	r3, [r2, #32]
 8001110:	4b5e      	ldr	r3, [pc, #376]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4a5d      	ldr	r2, [pc, #372]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6213      	str	r3, [r2, #32]
 800111c:	e00b      	b.n	8001136 <HAL_RCC_OscConfig+0x366>
 800111e:	4b5b      	ldr	r3, [pc, #364]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a5a      	ldr	r2, [pc, #360]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001124:	f023 0301 	bic.w	r3, r3, #1
 8001128:	6213      	str	r3, [r2, #32]
 800112a:	4b58      	ldr	r3, [pc, #352]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4a57      	ldr	r2, [pc, #348]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001130:	f023 0304 	bic.w	r3, r3, #4
 8001134:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d015      	beq.n	800116a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113e:	f7ff f85d 	bl	80001fc <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001144:	e00a      	b.n	800115c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001146:	f7ff f859 	bl	80001fc <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	; 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e093      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115c:	4b4b      	ldr	r3, [pc, #300]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0ee      	beq.n	8001146 <HAL_RCC_OscConfig+0x376>
 8001168:	e014      	b.n	8001194 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116a:	f7ff f847 	bl	80001fc <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001170:	e00a      	b.n	8001188 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001172:	f7ff f843 	bl	80001fc <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001180:	4293      	cmp	r3, r2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e07d      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1ee      	bne.n	8001172 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d105      	bne.n	80011a6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800119a:	4b3c      	ldr	r3, [pc, #240]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a3b      	ldr	r2, [pc, #236]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 80011a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d069      	beq.n	8001282 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d061      	beq.n	800127e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d146      	bne.n	8001250 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c2:	4b34      	ldr	r3, [pc, #208]	; (8001294 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff f818 	bl	80001fc <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d0:	f7ff f814 	bl	80001fc <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e050      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f6:	d108      	bne.n	800120a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4921      	ldr	r1, [pc, #132]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a19      	ldr	r1, [r3, #32]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	430b      	orrs	r3, r1
 800121c:	491b      	ldr	r1, [pc, #108]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 800121e:	4313      	orrs	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7fe ffe8 	bl	80001fc <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001230:	f7fe ffe4 	bl	80001fc <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e020      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x460>
 800124e:	e018      	b.n	8001282 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001256:	f7fe ffd1 	bl	80001fc <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800125e:	f7fe ffcd 	bl	80001fc <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e009      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_RCC_OscConfig+0x4bc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f0      	bne.n	800125e <HAL_RCC_OscConfig+0x48e>
 800127c:	e001      	b.n	8001282 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	40007000 	.word	0x40007000
 8001294:	42420060 	.word	0x42420060

08001298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012a6:	4b7e      	ldr	r3, [pc, #504]	; (80014a0 <HAL_RCC_ClockConfig+0x208>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d910      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b4:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <HAL_RCC_ClockConfig+0x208>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 0207 	bic.w	r2, r3, #7
 80012bc:	4978      	ldr	r1, [pc, #480]	; (80014a0 <HAL_RCC_ClockConfig+0x208>)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012c4:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <HAL_RCC_ClockConfig+0x208>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0e0      	b.n	8001498 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d020      	beq.n	8001324 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ee:	4b6d      	ldr	r3, [pc, #436]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4a6c      	ldr	r2, [pc, #432]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 80012f4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012f8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a66      	ldr	r2, [pc, #408]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 800130c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001310:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001312:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	4961      	ldr	r1, [pc, #388]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d06a      	beq.n	8001406 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d107      	bne.n	8001348 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001338:	4b5a      	ldr	r3, [pc, #360]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d115      	bne.n	8001370 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0a7      	b.n	8001498 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d107      	bne.n	8001360 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001350:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d109      	bne.n	8001370 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e09b      	b.n	8001498 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	4b50      	ldr	r3, [pc, #320]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e093      	b.n	8001498 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f023 0203 	bic.w	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4949      	ldr	r1, [pc, #292]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001382:	f7fe ff3b 	bl	80001fc <HAL_GetTick>
 8001386:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d112      	bne.n	80013b6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001392:	f7fe ff33 	bl	80001fc <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e077      	b.n	8001498 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a8:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d1ee      	bne.n	8001392 <HAL_RCC_ClockConfig+0xfa>
 80013b4:	e027      	b.n	8001406 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d11d      	bne.n	80013fa <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c0:	f7fe ff1c 	bl	80001fc <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e060      	b.n	8001498 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d1ee      	bne.n	80013c0 <HAL_RCC_ClockConfig+0x128>
 80013e2:	e010      	b.n	8001406 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e4:	f7fe ff0a 	bl	80001fc <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e04e      	b.n	8001498 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1ee      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001406:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <HAL_RCC_ClockConfig+0x208>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d210      	bcs.n	8001436 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <HAL_RCC_ClockConfig+0x208>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f023 0207 	bic.w	r2, r3, #7
 800141c:	4920      	ldr	r1, [pc, #128]	; (80014a0 <HAL_RCC_ClockConfig+0x208>)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_RCC_ClockConfig+0x208>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d001      	beq.n	8001436 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e030      	b.n	8001498 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	2b00      	cmp	r3, #0
 8001440:	d008      	beq.n	8001454 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	4915      	ldr	r1, [pc, #84]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d009      	beq.n	8001474 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001474:	f000 f81c 	bl	80014b0 <HAL_RCC_GetSysClockFreq>
 8001478:	4601      	mov	r1, r0
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_RCC_ClockConfig+0x210>)
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	fa21 f303 	lsr.w	r3, r1, r3
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_RCC_ClockConfig+0x214>)
 800148e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001490:	2000      	movs	r0, #0
 8001492:	f7fe fe71 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	08003e40 	.word	0x08003e40
 80014ac:	20000068 	.word	0x20000068

080014b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b0:	b490      	push	{r4, r7}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014b8:	1d3c      	adds	r4, r7, #4
 80014ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d002      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x40>
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d003      	beq.n	80014f6 <HAL_RCC_GetSysClockFreq+0x46>
 80014ee:	e02d      	b.n	800154c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <HAL_RCC_GetSysClockFreq+0xbc>)
 80014f2:	623b      	str	r3, [r7, #32]
      break;
 80014f4:	e02d      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	0c9b      	lsrs	r3, r3, #18
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001502:	4413      	add	r3, r2
 8001504:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001508:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	0c5b      	lsrs	r3, r3, #17
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001522:	4413      	add	r3, r2
 8001524:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001528:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_RCC_GetSysClockFreq+0xbc>)
 800152e:	fb02 f203 	mul.w	r2, r2, r3
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	fbb2 f3f3 	udiv	r3, r2, r3
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
 800153a:	e004      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	623b      	str	r3, [r7, #32]
      break;
 800154a:	e002      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_RCC_GetSysClockFreq+0xbc>)
 800154e:	623b      	str	r3, [r7, #32]
      break;
 8001550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001552:	6a3b      	ldr	r3, [r7, #32]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bc90      	pop	{r4, r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	08003c18 	.word	0x08003c18
 8001564:	08003c28 	.word	0x08003c28
 8001568:	40021000 	.word	0x40021000
 800156c:	007a1200 	.word	0x007a1200
 8001570:	003d0900 	.word	0x003d0900

08001574 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <RCC_Delay+0x34>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <RCC_Delay+0x38>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0a5b      	lsrs	r3, r3, #9
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001590:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1e5a      	subs	r2, r3, #1
 8001596:	60fa      	str	r2, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f9      	bne.n	8001590 <RCC_Delay+0x1c>
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000068 	.word	0x20000068
 80015ac:	10624dd3 	.word	0x10624dd3

080015b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d07d      	beq.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d0:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10d      	bne.n	80015f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80015dc:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	4a4b      	ldr	r2, [pc, #300]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e6:	61d3      	str	r3, [r2, #28]
 80015e8:	4b49      	ldr	r3, [pc, #292]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f4:	2301      	movs	r3, #1
 80015f6:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4b46      	ldr	r3, [pc, #280]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d118      	bne.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001604:	4b43      	ldr	r3, [pc, #268]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a42      	ldr	r2, [pc, #264]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800160a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001610:	f7fe fdf4 	bl	80001fc <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	e008      	b.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001618:	f7fe fdf0 	bl	80001fc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e06d      	b.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162a:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001636:	4b36      	ldr	r3, [pc, #216]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800163e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d02e      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d027      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001654:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800165c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001664:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800166a:	4a29      	ldr	r2, [pc, #164]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d014      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7fe fdbf 	bl	80001fc <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	e00a      	b.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7fe fdbb 	bl	80001fc <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d901      	bls.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e036      	b.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0ee      	beq.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4917      	ldr	r1, [pc, #92]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	4a13      	ldr	r2, [pc, #76]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	490b      	ldr	r1, [pc, #44]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	4904      	ldr	r1, [pc, #16]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	40007000 	.word	0x40007000
 8001718:	42420440 	.word	0x42420440

0800171c <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e01d      	b.n	800176a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f001 fd38 	bl	80031b8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3304      	adds	r3, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f000 fa2a 	bl	8001bb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0201 	orr.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d122      	bne.n	8001802 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d11b      	bne.n	8001802 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f06f 0202 	mvn.w	r2, #2
 80017d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f9c8 	bl	8001b7e <HAL_TIM_IC_CaptureCallback>
 80017ee:	e005      	b.n	80017fc <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f9bb 	bl	8001b6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f9ca 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b04      	cmp	r3, #4
 800180e:	d122      	bne.n	8001856 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b04      	cmp	r3, #4
 800181c:	d11b      	bne.n	8001856 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f06f 0204 	mvn.w	r2, #4
 8001826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f99e 	bl	8001b7e <HAL_TIM_IC_CaptureCallback>
 8001842:	e005      	b.n	8001850 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f991 	bl	8001b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f9a0 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b08      	cmp	r3, #8
 8001862:	d122      	bne.n	80018aa <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b08      	cmp	r3, #8
 8001870:	d11b      	bne.n	80018aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f06f 0208 	mvn.w	r2, #8
 800187a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2204      	movs	r2, #4
 8001880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f974 	bl	8001b7e <HAL_TIM_IC_CaptureCallback>
 8001896:	e005      	b.n	80018a4 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f967 	bl	8001b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f976 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	2b10      	cmp	r3, #16
 80018b6:	d122      	bne.n	80018fe <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d11b      	bne.n	80018fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f06f 0210 	mvn.w	r2, #16
 80018ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2208      	movs	r2, #8
 80018d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f94a 	bl	8001b7e <HAL_TIM_IC_CaptureCallback>
 80018ea:	e005      	b.n	80018f8 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f93d 	bl	8001b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f94c 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d10e      	bne.n	800192a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f06f 0201 	mvn.w	r2, #1
 8001922:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f001 fa61 	bl	8002dec <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001934:	2b80      	cmp	r3, #128	; 0x80
 8001936:	d10e      	bne.n	8001956 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	2b80      	cmp	r3, #128	; 0x80
 8001944:	d107      	bne.n	8001956 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800194e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fa87 	bl	8001e64 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001960:	2b40      	cmp	r3, #64	; 0x40
 8001962:	d10e      	bne.n	8001982 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800196e:	2b40      	cmp	r3, #64	; 0x40
 8001970:	d107      	bne.n	8001982 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800197a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f910 	bl	8001ba2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f003 0320 	and.w	r3, r3, #32
 800198c:	2b20      	cmp	r3, #32
 800198e:	d10e      	bne.n	80019ae <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	2b20      	cmp	r3, #32
 800199c:	d107      	bne.n	80019ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f06f 0220 	mvn.w	r2, #32
 80019a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fa52 	bl	8001e52 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_TIM_ConfigClockSource+0x1c>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e0c8      	b.n	8001b64 <HAL_TIM_ConfigClockSource+0x1ae>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2202      	movs	r2, #2
 80019de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80019f0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019f8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b40      	cmp	r3, #64	; 0x40
 8001a08:	d077      	beq.n	8001afa <HAL_TIM_ConfigClockSource+0x144>
 8001a0a:	2b40      	cmp	r3, #64	; 0x40
 8001a0c:	d80e      	bhi.n	8001a2c <HAL_TIM_ConfigClockSource+0x76>
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	f000 808a 	beq.w	8001b28 <HAL_TIM_ConfigClockSource+0x172>
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d802      	bhi.n	8001a1e <HAL_TIM_ConfigClockSource+0x68>
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d07e      	beq.n	8001b1a <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001a1c:	e099      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	f000 8089 	beq.w	8001b36 <HAL_TIM_ConfigClockSource+0x180>
 8001a24:	2b30      	cmp	r3, #48	; 0x30
 8001a26:	f000 808d 	beq.w	8001b44 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8001a2a:	e092      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001a2c:	2b70      	cmp	r3, #112	; 0x70
 8001a2e:	d016      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0xa8>
 8001a30:	2b70      	cmp	r3, #112	; 0x70
 8001a32:	d804      	bhi.n	8001a3e <HAL_TIM_ConfigClockSource+0x88>
 8001a34:	2b50      	cmp	r3, #80	; 0x50
 8001a36:	d040      	beq.n	8001aba <HAL_TIM_ConfigClockSource+0x104>
 8001a38:	2b60      	cmp	r3, #96	; 0x60
 8001a3a:	d04e      	beq.n	8001ada <HAL_TIM_ConfigClockSource+0x124>
    break;
 8001a3c:	e089      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a42:	d003      	beq.n	8001a4c <HAL_TIM_ConfigClockSource+0x96>
 8001a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a48:	d024      	beq.n	8001a94 <HAL_TIM_ConfigClockSource+0xde>
    break;
 8001a4a:	e082      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0207 	bic.w	r2, r2, #7
 8001a5a:	609a      	str	r2, [r3, #8]
    break;
 8001a5c:	e079      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6899      	ldr	r1, [r3, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f000 f98b 	bl	8001d88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	609a      	str	r2, [r3, #8]
    break;
 8001a92:	e05e      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6899      	ldr	r1, [r3, #8]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f000 f970 	bl	8001d88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ab6:	609a      	str	r2, [r3, #8]
    break;
 8001ab8:	e04b      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	6859      	ldr	r1, [r3, #4]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f000 f8da 	bl	8001c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2150      	movs	r1, #80	; 0x50
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f939 	bl	8001d4a <TIM_ITRx_SetConfig>
    break;
 8001ad8:	e03b      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f000 f8fc 	bl	8001ce4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2160      	movs	r1, #96	; 0x60
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f929 	bl	8001d4a <TIM_ITRx_SetConfig>
    break;
 8001af8:	e02b      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	461a      	mov	r2, r3
 8001b08:	f000 f8ba 	bl	8001c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2140      	movs	r1, #64	; 0x40
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f919 	bl	8001d4a <TIM_ITRx_SetConfig>
    break;
 8001b18:	e01b      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f912 	bl	8001d4a <TIM_ITRx_SetConfig>
    break;
 8001b26:	e014      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2110      	movs	r1, #16
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f90b 	bl	8001d4a <TIM_ITRx_SetConfig>
    break;
 8001b34:	e00d      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f904 	bl	8001d4a <TIM_ITRx_SetConfig>
    break;
 8001b42:	e006      	b.n	8001b52 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2130      	movs	r1, #48	; 0x30
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f8fd 	bl	8001d4a <TIM_ITRx_SetConfig>
    break;
 8001b50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <TIM_Base_SetConfig+0xc0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d00b      	beq.n	8001be8 <TIM_Base_SetConfig+0x34>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd6:	d007      	beq.n	8001be8 <TIM_Base_SetConfig+0x34>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a27      	ldr	r2, [pc, #156]	; (8001c78 <TIM_Base_SetConfig+0xc4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d003      	beq.n	8001be8 <TIM_Base_SetConfig+0x34>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <TIM_Base_SetConfig+0xc8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d108      	bne.n	8001bfa <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <TIM_Base_SetConfig+0xc0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00b      	beq.n	8001c1a <TIM_Base_SetConfig+0x66>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c08:	d007      	beq.n	8001c1a <TIM_Base_SetConfig+0x66>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <TIM_Base_SetConfig+0xc4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d003      	beq.n	8001c1a <TIM_Base_SetConfig+0x66>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <TIM_Base_SetConfig+0xc8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d108      	bne.n	8001c2c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c32:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <TIM_Base_SetConfig+0xc0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d103      	bne.n	8001c64 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	615a      	str	r2, [r3, #20]
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40012c00 	.word	0x40012c00
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40000800 	.word	0x40000800

08001c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	f023 0201 	bic.w	r2, r3, #1
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f023 030a 	bic.w	r3, r3, #10
 8001cc4:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	621a      	str	r2, [r3, #32]
}
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f023 0210 	bic.w	r2, r3, #16
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	031b      	lsls	r3, r3, #12
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	621a      	str	r2, [r3, #32]
}
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d66:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	f043 0307 	orr.w	r3, r3, #7
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	609a      	str	r2, [r3, #8]
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	021a      	lsls	r2, r3, #8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	609a      	str	r2, [r3, #8]
}
 8001dc0:	bf00      	nop
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e032      	b.n	8001e48 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e00:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e22:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6899      	ldr	r1, [r3, #8]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <LCD_Delay>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "lcd.h"
	
void LCD_Delay(void)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	af00      	add	r7, sp, #0
	HAL_Delay(_LCD_DELAY);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7fe f9c8 	bl	8000210 <HAL_Delay>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8001e8e:	4b57      	ldr	r3, [pc, #348]	; (8001fec <lcd_cmd+0x168>)
 8001e90:	2204      	movs	r2, #4
 8001e92:	615a      	str	r2, [r3, #20]
	
	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8001e94:	4b55      	ldr	r3, [pc, #340]	; (8001fec <lcd_cmd+0x168>)
 8001e96:	2202      	movs	r2, #2
 8001e98:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8001e9a:	4b54      	ldr	r3, [pc, #336]	; (8001fec <lcd_cmd+0x168>)
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8001ea0:	4b52      	ldr	r3, [pc, #328]	; (8001fec <lcd_cmd+0x168>)
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8001ea6:	4b51      	ldr	r3, [pc, #324]	; (8001fec <lcd_cmd+0x168>)
 8001ea8:	2240      	movs	r2, #64	; 0x40
 8001eaa:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8001eac:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <lcd_cmd+0x168>)
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	615a      	str	r2, [r3, #20]
	
	LCD_Delay();
 8001eb2:	f7ff ffe0 	bl	8001e76 <LCD_Delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8001eb6:	4b4d      	ldr	r3, [pc, #308]	; (8001fec <lcd_cmd+0x168>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4a4c      	ldr	r2, [pc, #304]	; (8001fec <lcd_cmd+0x168>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	60d3      	str	r3, [r2, #12]
		
	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <lcd_cmd+0x50>
 8001ecc:	4b47      	ldr	r3, [pc, #284]	; (8001fec <lcd_cmd+0x168>)
 8001ece:	2210      	movs	r2, #16
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	e003      	b.n	8001edc <lcd_cmd+0x58>
 8001ed4:	4b45      	ldr	r3, [pc, #276]	; (8001fec <lcd_cmd+0x168>)
 8001ed6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eda:	611a      	str	r2, [r3, #16]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <lcd_cmd+0x6a>
 8001ee6:	4b41      	ldr	r3, [pc, #260]	; (8001fec <lcd_cmd+0x168>)
 8001ee8:	2220      	movs	r2, #32
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	e003      	b.n	8001ef6 <lcd_cmd+0x72>
 8001eee:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <lcd_cmd+0x168>)
 8001ef0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ef4:	611a      	str	r2, [r3, #16]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <lcd_cmd+0x84>
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <lcd_cmd+0x168>)
 8001f02:	2240      	movs	r2, #64	; 0x40
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	e003      	b.n	8001f10 <lcd_cmd+0x8c>
 8001f08:	4b38      	ldr	r3, [pc, #224]	; (8001fec <lcd_cmd+0x168>)
 8001f0a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f0e:	611a      	str	r2, [r3, #16]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da03      	bge.n	8001f20 <lcd_cmd+0x9c>
 8001f18:	4b34      	ldr	r3, [pc, #208]	; (8001fec <lcd_cmd+0x168>)
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	611a      	str	r2, [r3, #16]
 8001f1e:	e003      	b.n	8001f28 <lcd_cmd+0xa4>
 8001f20:	4b32      	ldr	r3, [pc, #200]	; (8001fec <lcd_cmd+0x168>)
 8001f22:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f26:	611a      	str	r2, [r3, #16]
	
	LCD_Delay();
 8001f28:	f7ff ffa5 	bl	8001e76 <LCD_Delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <lcd_cmd+0x168>)
 8001f2e:	2202      	movs	r2, #2
 8001f30:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8001f32:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <lcd_cmd+0x168>)
 8001f34:	2210      	movs	r2, #16
 8001f36:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8001f38:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <lcd_cmd+0x168>)
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8001f3e:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <lcd_cmd+0x168>)
 8001f40:	2240      	movs	r2, #64	; 0x40
 8001f42:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8001f44:	4b29      	ldr	r3, [pc, #164]	; (8001fec <lcd_cmd+0x168>)
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	615a      	str	r2, [r3, #20]
	
	LCD_Delay();
 8001f4a:	f7ff ff94 	bl	8001e76 <LCD_Delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8001f4e:	4b27      	ldr	r3, [pc, #156]	; (8001fec <lcd_cmd+0x168>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	4a26      	ldr	r2, [pc, #152]	; (8001fec <lcd_cmd+0x168>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	60d3      	str	r3, [r2, #12]
	
	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <lcd_cmd+0xe8>
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <lcd_cmd+0x168>)
 8001f66:	2210      	movs	r2, #16
 8001f68:	611a      	str	r2, [r3, #16]
 8001f6a:	e003      	b.n	8001f74 <lcd_cmd+0xf0>
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <lcd_cmd+0x168>)
 8001f6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f72:	611a      	str	r2, [r3, #16]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <lcd_cmd+0x102>
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <lcd_cmd+0x168>)
 8001f80:	2220      	movs	r2, #32
 8001f82:	611a      	str	r2, [r3, #16]
 8001f84:	e003      	b.n	8001f8e <lcd_cmd+0x10a>
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <lcd_cmd+0x168>)
 8001f88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f8c:	611a      	str	r2, [r3, #16]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <lcd_cmd+0x11c>
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <lcd_cmd+0x168>)
 8001f9a:	2240      	movs	r2, #64	; 0x40
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	e003      	b.n	8001fa8 <lcd_cmd+0x124>
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <lcd_cmd+0x168>)
 8001fa2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fa6:	611a      	str	r2, [r3, #16]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <lcd_cmd+0x136>
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <lcd_cmd+0x168>)
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	611a      	str	r2, [r3, #16]
 8001fb8:	e003      	b.n	8001fc2 <lcd_cmd+0x13e>
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <lcd_cmd+0x168>)
 8001fbc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fc0:	611a      	str	r2, [r3, #16]

	LCD_Delay();
 8001fc2:	f7ff ff58 	bl	8001e76 <LCD_Delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <lcd_cmd+0x168>)
 8001fc8:	2202      	movs	r2, #2
 8001fca:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <lcd_cmd+0x168>)
 8001fce:	2210      	movs	r2, #16
 8001fd0:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <lcd_cmd+0x168>)
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <lcd_cmd+0x168>)
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8001fde:	4b03      	ldr	r3, [pc, #12]	; (8001fec <lcd_cmd+0x168>)
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	615a      	str	r2, [r3, #20]
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40010800 	.word	0x40010800

08001ff0 <LCD_Char_CP>:

void LCD_Char_CP(char out_char)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8001ffa:	4b59      	ldr	r3, [pc, #356]	; (8002160 <LCD_Char_CP+0x170>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4a58      	ldr	r2, [pc, #352]	; (8002160 <LCD_Char_CP+0x170>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	60d3      	str	r3, [r2, #12]
	
	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8002006:	4b56      	ldr	r3, [pc, #344]	; (8002160 <LCD_Char_CP+0x170>)
 8002008:	2202      	movs	r2, #2
 800200a:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 800200c:	4b54      	ldr	r3, [pc, #336]	; (8002160 <LCD_Char_CP+0x170>)
 800200e:	2210      	movs	r2, #16
 8002010:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8002012:	4b53      	ldr	r3, [pc, #332]	; (8002160 <LCD_Char_CP+0x170>)
 8002014:	2220      	movs	r2, #32
 8002016:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8002018:	4b51      	ldr	r3, [pc, #324]	; (8002160 <LCD_Char_CP+0x170>)
 800201a:	2240      	movs	r2, #64	; 0x40
 800201c:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800201e:	4b50      	ldr	r3, [pc, #320]	; (8002160 <LCD_Char_CP+0x170>)
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	615a      	str	r2, [r3, #20]
	
	LCD_Delay();
 8002024:	f7ff ff27 	bl	8001e76 <LCD_Delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8002028:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <LCD_Char_CP+0x170>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <LCD_Char_CP+0x170>)
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	60d3      	str	r3, [r2, #12]
		
	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <LCD_Char_CP+0x56>
 800203e:	4b48      	ldr	r3, [pc, #288]	; (8002160 <LCD_Char_CP+0x170>)
 8002040:	2210      	movs	r2, #16
 8002042:	611a      	str	r2, [r3, #16]
 8002044:	e003      	b.n	800204e <LCD_Char_CP+0x5e>
 8002046:	4b46      	ldr	r3, [pc, #280]	; (8002160 <LCD_Char_CP+0x170>)
 8002048:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800204c:	611a      	str	r2, [r3, #16]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <LCD_Char_CP+0x70>
 8002058:	4b41      	ldr	r3, [pc, #260]	; (8002160 <LCD_Char_CP+0x170>)
 800205a:	2220      	movs	r2, #32
 800205c:	611a      	str	r2, [r3, #16]
 800205e:	e003      	b.n	8002068 <LCD_Char_CP+0x78>
 8002060:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <LCD_Char_CP+0x170>)
 8002062:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002066:	611a      	str	r2, [r3, #16]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <LCD_Char_CP+0x8a>
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <LCD_Char_CP+0x170>)
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	611a      	str	r2, [r3, #16]
 8002078:	e003      	b.n	8002082 <LCD_Char_CP+0x92>
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <LCD_Char_CP+0x170>)
 800207c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002080:	611a      	str	r2, [r3, #16]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	da03      	bge.n	8002092 <LCD_Char_CP+0xa2>
 800208a:	4b35      	ldr	r3, [pc, #212]	; (8002160 <LCD_Char_CP+0x170>)
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	e003      	b.n	800209a <LCD_Char_CP+0xaa>
 8002092:	4b33      	ldr	r3, [pc, #204]	; (8002160 <LCD_Char_CP+0x170>)
 8002094:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002098:	611a      	str	r2, [r3, #16]
	
	LCD_Delay();
 800209a:	f7ff feec 	bl	8001e76 <LCD_Delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <LCD_Char_CP+0x170>)
 80020a0:	2202      	movs	r2, #2
 80020a2:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80020a4:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <LCD_Char_CP+0x170>)
 80020a6:	2210      	movs	r2, #16
 80020a8:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <LCD_Char_CP+0x170>)
 80020ac:	2220      	movs	r2, #32
 80020ae:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <LCD_Char_CP+0x170>)
 80020b2:	2240      	movs	r2, #64	; 0x40
 80020b4:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80020b6:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <LCD_Char_CP+0x170>)
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	615a      	str	r2, [r3, #20]
	
	LCD_Delay();
 80020bc:	f7ff fedb 	bl	8001e76 <LCD_Delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <LCD_Char_CP+0x170>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <LCD_Char_CP+0x170>)
 80020c6:	f043 0302 	orr.w	r3, r3, #2
 80020ca:	60d3      	str	r3, [r2, #12]
	
	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <LCD_Char_CP+0xee>
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <LCD_Char_CP+0x170>)
 80020d8:	2210      	movs	r2, #16
 80020da:	611a      	str	r2, [r3, #16]
 80020dc:	e003      	b.n	80020e6 <LCD_Char_CP+0xf6>
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <LCD_Char_CP+0x170>)
 80020e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020e4:	611a      	str	r2, [r3, #16]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <LCD_Char_CP+0x108>
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <LCD_Char_CP+0x170>)
 80020f2:	2220      	movs	r2, #32
 80020f4:	611a      	str	r2, [r3, #16]
 80020f6:	e003      	b.n	8002100 <LCD_Char_CP+0x110>
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <LCD_Char_CP+0x170>)
 80020fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80020fe:	611a      	str	r2, [r3, #16]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <LCD_Char_CP+0x122>
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <LCD_Char_CP+0x170>)
 800210c:	2240      	movs	r2, #64	; 0x40
 800210e:	611a      	str	r2, [r3, #16]
 8002110:	e003      	b.n	800211a <LCD_Char_CP+0x12a>
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <LCD_Char_CP+0x170>)
 8002114:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002118:	611a      	str	r2, [r3, #16]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <LCD_Char_CP+0x13c>
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <LCD_Char_CP+0x170>)
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	611a      	str	r2, [r3, #16]
 800212a:	e003      	b.n	8002134 <LCD_Char_CP+0x144>
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <LCD_Char_CP+0x170>)
 800212e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002132:	611a      	str	r2, [r3, #16]

	LCD_Delay();
 8002134:	f7ff fe9f 	bl	8001e76 <LCD_Delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <LCD_Char_CP+0x170>)
 800213a:	2202      	movs	r2, #2
 800213c:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <LCD_Char_CP+0x170>)
 8002140:	2210      	movs	r2, #16
 8002142:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <LCD_Char_CP+0x170>)
 8002146:	2220      	movs	r2, #32
 8002148:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <LCD_Char_CP+0x170>)
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <LCD_Char_CP+0x170>)
 8002152:	2280      	movs	r2, #128	; 0x80
 8002154:	615a      	str	r2, [r3, #20]
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40010800 	.word	0x40010800

08002164 <LCD_Out_CP>:

void LCD_Out_CP(char *out_char)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	while(*out_char)
 800216c:	e006      	b.n	800217c <LCD_Out_CP+0x18>
	{
		//LCD_Delay();
		LCD_Char_CP(*out_char++);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff3a 	bl	8001ff0 <LCD_Char_CP>
	while(*out_char)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f4      	bne.n	800216e <LCD_Out_CP+0xa>
	}
	LCD_Delay();
 8002184:	f7ff fe77 	bl	8001e76 <LCD_Delay>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <lcd_init>:


//void lcd_init(char bits, char font, char lines)
void lcd_init(void)
{		
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
	lcd_cmd (0x01);  //ben ekledim
 8002194:	2001      	movs	r0, #1
 8002196:	f7ff fe75 	bl	8001e84 <lcd_cmd>
	lcd_cmd (0x02);
 800219a:	2002      	movs	r0, #2
 800219c:	f7ff fe72 	bl	8001e84 <lcd_cmd>
	lcd_cmd (0x28);
 80021a0:	2028      	movs	r0, #40	; 0x28
 80021a2:	f7ff fe6f 	bl	8001e84 <lcd_cmd>
	lcd_cmd (0x0C);
 80021a6:	200c      	movs	r0, #12
 80021a8:	f7ff fe6c 	bl	8001e84 <lcd_cmd>
	lcd_cmd (0x80);
 80021ac:	2080      	movs	r0, #128	; 0x80
 80021ae:	f7ff fe69 	bl	8001e84 <lcd_cmd>
    HAL_Delay(50000);
    lcd_cmd(0x0C);
    HAL_Delay(50000);
    lcd_cmd(0x01);
		HAL_Delay(100000);*/
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <LCD_Goto>:

void LCD_Goto(unsigned char row, unsigned char column)
{	
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	460a      	mov	r2, r1
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	4613      	mov	r3, r2
 80021c4:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d106      	bne.n	80021da <LCD_Goto+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 80021cc:	79bb      	ldrb	r3, [r7, #6]
 80021ce:	337f      	adds	r3, #127	; 0x7f
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fe56 	bl	8001e84 <lcd_cmd>
	}
	else if(row == 2)
	{
		lcd_cmd(0xC0 + (column - 1));
	} 
}
 80021d8:	e008      	b.n	80021ec <LCD_Goto+0x36>
	else if(row == 2)
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d105      	bne.n	80021ec <LCD_Goto+0x36>
		lcd_cmd(0xC0 + (column - 1));
 80021e0:	79bb      	ldrb	r3, [r7, #6]
 80021e2:	3b41      	subs	r3, #65	; 0x41
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fe4c 	bl	8001e84 <lcd_cmd>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <lcd_printf>:
	LCD_Goto(row, column);
	LCD_Char_CP(out_char);
}

void lcd_printf(unsigned char row, unsigned char column, char *out_char)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	603a      	str	r2, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	460b      	mov	r3, r1
 8002202:	71bb      	strb	r3, [r7, #6]
	LCD_Goto(row, column);
 8002204:	79ba      	ldrb	r2, [r7, #6]
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ffd3 	bl	80021b6 <LCD_Goto>
	LCD_Out_CP(out_char);
 8002210:	6838      	ldr	r0, [r7, #0]
 8002212:	f7ff ffa7 	bl	8002164 <LCD_Out_CP>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t a = 1;
 8002226:	2301      	movs	r3, #1
 8002228:	71fb      	strb	r3, [r7, #7]
	uint8_t b = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	71bb      	strb	r3, [r7, #6]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800222e:	f7fd ff8d 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002232:	f000 fdf1 	bl	8002e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002236:	f000 fedb 	bl	8002ff0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800223a:	f000 fe49 	bl	8002ed0 <MX_ADC1_Init>
  MX_TIM1_Init();
 800223e:	f000 fe85 	bl	8002f4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //Flash_Write(0x08003400, deger);
  HAL_TIM_Base_Start_IT(&htim1);
 8002242:	48be      	ldr	r0, [pc, #760]	; (800253c <main+0x31c>)
 8002244:	f7ff fa95 	bl	8001772 <HAL_TIM_Base_Start_IT>

  lcd_init();
 8002248:	f7ff ffa2 	bl	8002190 <lcd_init>

  HAL_ADC_Start(&hadc1);
 800224c:	48bc      	ldr	r0, [pc, #752]	; (8002540 <main+0x320>)
 800224e:	f7fe f8d9 	bl	8000404 <HAL_ADC_Start>
  HAL_Delay(50);
 8002252:	2032      	movs	r0, #50	; 0x32
 8002254:	f7fd ffdc 	bl	8000210 <HAL_Delay>

  lcd_printf(1,1, " ALVEMSIS A.S. ");
 8002258:	4aba      	ldr	r2, [pc, #744]	; (8002544 <main+0x324>)
 800225a:	2101      	movs	r1, #1
 800225c:	2001      	movs	r0, #1
 800225e:	f7ff ffc9 	bl	80021f4 <lcd_printf>
  HAL_Delay(500);
 8002262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002266:	f7fd ffd3 	bl	8000210 <HAL_Delay>
	  	  {
	  	      ticksNextBlink = HAL_GetTick() + ticksForBlink;
	  	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
	  	  }*/

	  HAL_Delay(2);
 800226a:	2002      	movs	r0, #2
 800226c:	f7fd ffd0 	bl	8000210 <HAL_Delay>

	      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) != 0)  //down
 8002270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002274:	48b4      	ldr	r0, [pc, #720]	; (8002548 <main+0x328>)
 8002276:	f7fe fd6b 	bl	8000d50 <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d016      	beq.n	80022ae <main+0x8e>
	      {
	      	a++;
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	3301      	adds	r3, #1
 8002284:	71fb      	strb	r3, [r7, #7]

	      	if(a == 7)//ana menü alt
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b07      	cmp	r3, #7
 800228a:	d101      	bne.n	8002290 <main+0x70>
	      	{
	      		a = 6;
 800228c:	2306      	movs	r3, #6
 800228e:	71fb      	strb	r3, [r7, #7]
	      	}
	      	if(a == 23)//led ayar alt
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	2b17      	cmp	r3, #23
 8002294:	d101      	bne.n	800229a <main+0x7a>
	      	{
	      		a = 22;
 8002296:	2316      	movs	r3, #22
 8002298:	71fb      	strb	r3, [r7, #7]
	      	}
	      	if(a == 52)//led ayar üst
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b34      	cmp	r3, #52	; 0x34
 800229e:	d101      	bne.n	80022a4 <main+0x84>
	      	{
	      		a = 51;
 80022a0:	2333      	movs	r3, #51	; 0x33
 80022a2:	71fb      	strb	r3, [r7, #7]
	      	}
	      	if(a == 86)//led el ayar üst
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2b56      	cmp	r3, #86	; 0x56
 80022a8:	d101      	bne.n	80022ae <main+0x8e>
	      	{
	      		a = 85;
 80022aa:	2355      	movs	r3, #85	; 0x55
 80022ac:	71fb      	strb	r3, [r7, #7]
	      	}
	      }

	      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))  //up
 80022ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b2:	48a5      	ldr	r0, [pc, #660]	; (8002548 <main+0x328>)
 80022b4:	f7fe fd4c 	bl	8000d50 <HAL_GPIO_ReadPin>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d016      	beq.n	80022ec <main+0xcc>
	      {
	      	a--;
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	71fb      	strb	r3, [r7, #7]

	      	if(a == 0)//ana menü üst
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <main+0xae>
	      	{
	      		a = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	71fb      	strb	r3, [r7, #7]
	      	}
	      	if(a == 19)//led ayar üst
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2b13      	cmp	r3, #19
 80022d2:	d101      	bne.n	80022d8 <main+0xb8>
	      	{
	      		a = 20;
 80022d4:	2314      	movs	r3, #20
 80022d6:	71fb      	strb	r3, [r7, #7]
	      	}
	      	if(a == 49)//led ayar üst
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b31      	cmp	r3, #49	; 0x31
 80022dc:	d101      	bne.n	80022e2 <main+0xc2>
	      	{
	      		a = 50;
 80022de:	2332      	movs	r3, #50	; 0x32
 80022e0:	71fb      	strb	r3, [r7, #7]
	      	}
	      	if(a == 79)//led el ayar üst
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	2b4f      	cmp	r3, #79	; 0x4f
 80022e6:	d101      	bne.n	80022ec <main+0xcc>
	      	{
	      		a = 80;
 80022e8:	2350      	movs	r3, #80	; 0x50
 80022ea:	71fb      	strb	r3, [r7, #7]
	      	}

	      }

      	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))  //enter
 80022ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f0:	4895      	ldr	r0, [pc, #596]	; (8002548 <main+0x328>)
 80022f2:	f7fe fd2d 	bl	8000d50 <HAL_GPIO_ReadPin>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00e      	beq.n	800231a <main+0xfa>
      	  {
      		  if(a == 1)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <main+0xe6>
      		  {
      			  a = 20;  //1.alt menü
 8002302:	2314      	movs	r3, #20
 8002304:	71fb      	strb	r3, [r7, #7]
      		  }
      		  if(a == 2)
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d101      	bne.n	8002310 <main+0xf0>
      		  {
      			  a = 50;  //2.alt menü
 800230c:	2332      	movs	r3, #50	; 0x32
 800230e:	71fb      	strb	r3, [r7, #7]
      		  }
      		  if(a == 3)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d101      	bne.n	800231a <main+0xfa>
      		  {
      			  a = 80;  //3.alt menü
 8002316:	2350      	movs	r3, #80	; 0x50
 8002318:	71fb      	strb	r3, [r7, #7]

      	  }

/*---------------------------ana menü---------------------------*/

	      	  if(a == 0)//ana menü üst
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <main+0x104>
	      	  {
	      		  a = 1;
 8002320:	2301      	movs	r3, #1
 8002322:	71fb      	strb	r3, [r7, #7]
	      	  }

	      	  if(a == 1)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d109      	bne.n	800233e <main+0x11e>
			  {
				  lcd_printf(1,1, ">1.Led Ayari    ");
 800232a:	4a88      	ldr	r2, [pc, #544]	; (800254c <main+0x32c>)
 800232c:	2101      	movs	r1, #1
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff ff60 	bl	80021f4 <lcd_printf>
				  lcd_printf(2,1, " 2.ADC izle     ");
 8002334:	4a86      	ldr	r2, [pc, #536]	; (8002550 <main+0x330>)
 8002336:	2101      	movs	r1, #1
 8002338:	2002      	movs	r0, #2
 800233a:	f7ff ff5b 	bl	80021f4 <lcd_printf>
			  }

			  if(a == 2)
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d109      	bne.n	8002358 <main+0x138>
			  {
				  lcd_printf(1,1, " 1.Led Ayari    ");
 8002344:	4a83      	ldr	r2, [pc, #524]	; (8002554 <main+0x334>)
 8002346:	2101      	movs	r1, #1
 8002348:	2001      	movs	r0, #1
 800234a:	f7ff ff53 	bl	80021f4 <lcd_printf>
				  lcd_printf(2,1, ">2.ADC izle     ");
 800234e:	4a82      	ldr	r2, [pc, #520]	; (8002558 <main+0x338>)
 8002350:	2101      	movs	r1, #1
 8002352:	2002      	movs	r0, #2
 8002354:	f7ff ff4e 	bl	80021f4 <lcd_printf>
			  }

			  if(a == 3)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d109      	bne.n	8002372 <main+0x152>
			  {
				  lcd_printf(1,1, ">3.El ile ADC   ");
 800235e:	4a7f      	ldr	r2, [pc, #508]	; (800255c <main+0x33c>)
 8002360:	2101      	movs	r1, #1
 8002362:	2001      	movs	r0, #1
 8002364:	f7ff ff46 	bl	80021f4 <lcd_printf>
				  lcd_printf(2,1, " 4.Wifi         ");
 8002368:	4a7d      	ldr	r2, [pc, #500]	; (8002560 <main+0x340>)
 800236a:	2101      	movs	r1, #1
 800236c:	2002      	movs	r0, #2
 800236e:	f7ff ff41 	bl	80021f4 <lcd_printf>
			  }

			  if(a == 4)
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d109      	bne.n	800238c <main+0x16c>
			  {
				  lcd_printf(1,1, " 3.El ile ADC   ");
 8002378:	4a7a      	ldr	r2, [pc, #488]	; (8002564 <main+0x344>)
 800237a:	2101      	movs	r1, #1
 800237c:	2001      	movs	r0, #1
 800237e:	f7ff ff39 	bl	80021f4 <lcd_printf>
				  lcd_printf(2,1, ">4.Wifi         ");
 8002382:	4a79      	ldr	r2, [pc, #484]	; (8002568 <main+0x348>)
 8002384:	2101      	movs	r1, #1
 8002386:	2002      	movs	r0, #2
 8002388:	f7ff ff34 	bl	80021f4 <lcd_printf>
			  }

			  if(a == 5)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	2b05      	cmp	r3, #5
 8002390:	d109      	bne.n	80023a6 <main+0x186>
			  {
				  lcd_printf(1,1, ">5.Genel Ayarlar");
 8002392:	4a76      	ldr	r2, [pc, #472]	; (800256c <main+0x34c>)
 8002394:	2101      	movs	r1, #1
 8002396:	2001      	movs	r0, #1
 8002398:	f7ff ff2c 	bl	80021f4 <lcd_printf>
				  lcd_printf(2,1, " 6.İsimler      ");
 800239c:	4a74      	ldr	r2, [pc, #464]	; (8002570 <main+0x350>)
 800239e:	2101      	movs	r1, #1
 80023a0:	2002      	movs	r0, #2
 80023a2:	f7ff ff27 	bl	80021f4 <lcd_printf>
			  }

			  if(a == 6)
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	2b06      	cmp	r3, #6
 80023aa:	d109      	bne.n	80023c0 <main+0x1a0>
			  {
				  lcd_printf(1,1, " 5.Genel Ayarlar");
 80023ac:	4a71      	ldr	r2, [pc, #452]	; (8002574 <main+0x354>)
 80023ae:	2101      	movs	r1, #1
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7ff ff1f 	bl	80021f4 <lcd_printf>
				  lcd_printf(2,1, ">6.İsimler      ");
 80023b6:	4a70      	ldr	r2, [pc, #448]	; (8002578 <main+0x358>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	2002      	movs	r0, #2
 80023bc:	f7ff ff1a 	bl	80021f4 <lcd_printf>
			  }
/*---------------------------ana menü---------------------------*/
/*---------------------------led ayar---------------------------*/
			  if(a == 20)
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	2b14      	cmp	r3, #20
 80023c4:	d117      	bne.n	80023f6 <main+0x1d6>
			  {
				  lcd_printf(1,1,">AC              ");
 80023c6:	4a6d      	ldr	r2, [pc, #436]	; (800257c <main+0x35c>)
 80023c8:	2101      	movs	r1, #1
 80023ca:	2001      	movs	r0, #1
 80023cc:	f7ff ff12 	bl	80021f4 <lcd_printf>
				  lcd_printf(2,1," KAPAT           ");
 80023d0:	4a6b      	ldr	r2, [pc, #428]	; (8002580 <main+0x360>)
 80023d2:	2101      	movs	r1, #1
 80023d4:	2002      	movs	r0, #2
 80023d6:	f7ff ff0d 	bl	80021f4 <lcd_printf>

				  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 80023da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023de:	485a      	ldr	r0, [pc, #360]	; (8002548 <main+0x328>)
 80023e0:	f7fe fcb6 	bl	8000d50 <HAL_GPIO_ReadPin>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <main+0x1d6>
				  {
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023f0:	4855      	ldr	r0, [pc, #340]	; (8002548 <main+0x328>)
 80023f2:	f7fe fcc4 	bl	8000d7e <HAL_GPIO_WritePin>
				  }
			  }

			  if(a == 21)
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	2b15      	cmp	r3, #21
 80023fa:	d119      	bne.n	8002430 <main+0x210>
			  {
				  lcd_printf(1,1," AC              ");
 80023fc:	4a61      	ldr	r2, [pc, #388]	; (8002584 <main+0x364>)
 80023fe:	2101      	movs	r1, #1
 8002400:	2001      	movs	r0, #1
 8002402:	f7ff fef7 	bl	80021f4 <lcd_printf>
				  lcd_printf(2,1,">KAPAT           ");
 8002406:	4a60      	ldr	r2, [pc, #384]	; (8002588 <main+0x368>)
 8002408:	2101      	movs	r1, #1
 800240a:	2002      	movs	r0, #2
 800240c:	f7ff fef2 	bl	80021f4 <lcd_printf>

				  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8002410:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002414:	484c      	ldr	r0, [pc, #304]	; (8002548 <main+0x328>)
 8002416:	f7fe fc9b 	bl	8000d50 <HAL_GPIO_ReadPin>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <main+0x210>
				  {
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002426:	4848      	ldr	r0, [pc, #288]	; (8002548 <main+0x328>)
 8002428:	f7fe fca9 	bl	8000d7e <HAL_GPIO_WritePin>
					  b = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	71bb      	strb	r3, [r7, #6]
				  }
			  }

			  if(a == 22)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	2b16      	cmp	r3, #22
 8002434:	d113      	bne.n	800245e <main+0x23e>
			  {
				  lcd_printf(1,1,">GERI              ");
 8002436:	4a55      	ldr	r2, [pc, #340]	; (800258c <main+0x36c>)
 8002438:	2101      	movs	r1, #1
 800243a:	2001      	movs	r0, #1
 800243c:	f7ff feda 	bl	80021f4 <lcd_printf>
				  lcd_printf(2,1,"                   ");
 8002440:	4a53      	ldr	r2, [pc, #332]	; (8002590 <main+0x370>)
 8002442:	2101      	movs	r1, #1
 8002444:	2002      	movs	r0, #2
 8002446:	f7ff fed5 	bl	80021f4 <lcd_printf>

				  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 800244a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800244e:	483e      	ldr	r0, [pc, #248]	; (8002548 <main+0x328>)
 8002450:	f7fe fc7e 	bl	8000d50 <HAL_GPIO_ReadPin>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <main+0x23e>
				  {
					  a = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	71fb      	strb	r3, [r7, #7]
				  }
			  }

			  if(b == 2) //led yanma süresi stabil kalsın diye
 800245e:	79bb      	ldrb	r3, [r7, #6]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d11f      	bne.n	80024a4 <main+0x284>
			  {
				  if (HAL_GetTick() > ledim)
 8002464:	f7fd feca 	bl	80001fc <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <main+0x374>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d918      	bls.n	80024a4 <main+0x284>
				  	  {
				  	      ledim = HAL_GetTick() + adc2;
 8002472:	f7fd fec3 	bl	80001fc <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	4b47      	ldr	r3, [pc, #284]	; (8002598 <main+0x378>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4413      	add	r3, r2
 800247e:	4a45      	ldr	r2, [pc, #276]	; (8002594 <main+0x374>)
 8002480:	6013      	str	r3, [r2, #0]
				  	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 8002482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002486:	4830      	ldr	r0, [pc, #192]	; (8002548 <main+0x328>)
 8002488:	f7fe fc62 	bl	8000d50 <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf0c      	ite	eq
 8002492:	2301      	moveq	r3, #1
 8002494:	2300      	movne	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800249e:	482a      	ldr	r0, [pc, #168]	; (8002548 <main+0x328>)
 80024a0:	f7fe fc6d 	bl	8000d7e <HAL_GPIO_WritePin>
				  	  }
			  }

			  if(b == 3) //led el ile yanma süresi stabil kalsın diye
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d11f      	bne.n	80024ea <main+0x2ca>
			  {
				  if (HAL_GetTick() > ledim)
 80024aa:	f7fd fea7 	bl	80001fc <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b38      	ldr	r3, [pc, #224]	; (8002594 <main+0x374>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d918      	bls.n	80024ea <main+0x2ca>
				  	  {
				  	      ledim = HAL_GetTick() + deger;
 80024b8:	f7fd fea0 	bl	80001fc <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b37      	ldr	r3, [pc, #220]	; (800259c <main+0x37c>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a33      	ldr	r2, [pc, #204]	; (8002594 <main+0x374>)
 80024c6:	6013      	str	r3, [r2, #0]
				  	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 80024c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024cc:	481e      	ldr	r0, [pc, #120]	; (8002548 <main+0x328>)
 80024ce:	f7fe fc3f 	bl	8000d50 <HAL_GPIO_ReadPin>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024e4:	4818      	ldr	r0, [pc, #96]	; (8002548 <main+0x328>)
 80024e6:	f7fe fc4a 	bl	8000d7e <HAL_GPIO_WritePin>
				  	  }
			  }
/*---------------------------led ayar---------------------------*/
/*---------------------------ADC izle---------------------------*/

			  if(a == 50)
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	2b32      	cmp	r3, #50	; 0x32
 80024ee:	f040 8083 	bne.w	80025f8 <main+0x3d8>
			  {
				  adc2 = HAL_ADC_GetValue(&hadc1);
 80024f2:	4813      	ldr	r0, [pc, #76]	; (8002540 <main+0x320>)
 80024f4:	f7fe f834 	bl	8000560 <HAL_ADC_GetValue>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b27      	ldr	r3, [pc, #156]	; (8002598 <main+0x378>)
 80024fc:	601a      	str	r2, [r3, #0]

				  sprintf(adc2deger, "%u    ", adc2);
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <main+0x378>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	4926      	ldr	r1, [pc, #152]	; (80025a0 <main+0x380>)
 8002506:	4827      	ldr	r0, [pc, #156]	; (80025a4 <main+0x384>)
 8002508:	f000 ff68 	bl	80033dc <siprintf>

				  lcd_printf(1,1,">ADC Deger:     ");
 800250c:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <main+0x388>)
 800250e:	2101      	movs	r1, #1
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff fe6f 	bl	80021f4 <lcd_printf>
				  lcd_printf(1,12, adc2deger);
 8002516:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <main+0x384>)
 8002518:	210c      	movs	r1, #12
 800251a:	2001      	movs	r0, #1
 800251c:	f7ff fe6a 	bl	80021f4 <lcd_printf>
				  lcd_printf(2,1," GERI           ");
 8002520:	4a22      	ldr	r2, [pc, #136]	; (80025ac <main+0x38c>)
 8002522:	2101      	movs	r1, #1
 8002524:	2002      	movs	r0, #2
 8002526:	f7ff fe65 	bl	80021f4 <lcd_printf>

					  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 800252a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800252e:	4806      	ldr	r0, [pc, #24]	; (8002548 <main+0x328>)
 8002530:	f7fe fc0e 	bl	8000d50 <HAL_GPIO_ReadPin>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d05c      	beq.n	80025f4 <main+0x3d4>
 800253a:	e039      	b.n	80025b0 <main+0x390>
 800253c:	20000148 	.word	0x20000148
 8002540:	20000118 	.word	0x20000118
 8002544:	08003c2c 	.word	0x08003c2c
 8002548:	40010800 	.word	0x40010800
 800254c:	08003c3c 	.word	0x08003c3c
 8002550:	08003c50 	.word	0x08003c50
 8002554:	08003c64 	.word	0x08003c64
 8002558:	08003c78 	.word	0x08003c78
 800255c:	08003c8c 	.word	0x08003c8c
 8002560:	08003ca0 	.word	0x08003ca0
 8002564:	08003cb4 	.word	0x08003cb4
 8002568:	08003cc8 	.word	0x08003cc8
 800256c:	08003cdc 	.word	0x08003cdc
 8002570:	08003cf0 	.word	0x08003cf0
 8002574:	08003d04 	.word	0x08003d04
 8002578:	08003d18 	.word	0x08003d18
 800257c:	08003d2c 	.word	0x08003d2c
 8002580:	08003d40 	.word	0x08003d40
 8002584:	08003d54 	.word	0x08003d54
 8002588:	08003d68 	.word	0x08003d68
 800258c:	08003d7c 	.word	0x08003d7c
 8002590:	08003d90 	.word	0x08003d90
 8002594:	200000f4 	.word	0x200000f4
 8002598:	200000ec 	.word	0x200000ec
 800259c:	200000f8 	.word	0x200000f8
 80025a0:	08003da4 	.word	0x08003da4
 80025a4:	20000008 	.word	0x20000008
 80025a8:	08003dac 	.word	0x08003dac
 80025ac:	08003dc0 	.word	0x08003dc0
					  {
						  b = 1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	71bb      	strb	r3, [r7, #6]

						  if (HAL_GetTick() > ledim)
 80025b4:	f7fd fe22 	bl	80001fc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b8f      	ldr	r3, [pc, #572]	; (80027f8 <main+0x5d8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d918      	bls.n	80025f4 <main+0x3d4>
						  	  {
						  	      ledim = HAL_GetTick() + adc2;
 80025c2:	f7fd fe1b 	bl	80001fc <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <main+0x5dc>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4413      	add	r3, r2
 80025ce:	4a8a      	ldr	r2, [pc, #552]	; (80027f8 <main+0x5d8>)
 80025d0:	6013      	str	r3, [r2, #0]
						  	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 80025d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025d6:	488a      	ldr	r0, [pc, #552]	; (8002800 <main+0x5e0>)
 80025d8:	f7fe fbba 	bl	8000d50 <HAL_GPIO_ReadPin>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf0c      	ite	eq
 80025e2:	2301      	moveq	r3, #1
 80025e4:	2300      	movne	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ee:	4884      	ldr	r0, [pc, #528]	; (8002800 <main+0x5e0>)
 80025f0:	f7fe fbc5 	bl	8000d7e <HAL_GPIO_WritePin>
						  	  }
					  }
				  b = 2; //led yanma süresi stabil kalsın diye
 80025f4:	2302      	movs	r3, #2
 80025f6:	71bb      	strb	r3, [r7, #6]
			  }

			  if(a == 51)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	2b33      	cmp	r3, #51	; 0x33
 80025fc:	d11f      	bne.n	800263e <main+0x41e>
			  {
				  sprintf(adc2deger, "%u    ", adc2);
 80025fe:	4b7f      	ldr	r3, [pc, #508]	; (80027fc <main+0x5dc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	497f      	ldr	r1, [pc, #508]	; (8002804 <main+0x5e4>)
 8002606:	4880      	ldr	r0, [pc, #512]	; (8002808 <main+0x5e8>)
 8002608:	f000 fee8 	bl	80033dc <siprintf>

				  lcd_printf(1,1," ADC Deger:     ");
 800260c:	4a7f      	ldr	r2, [pc, #508]	; (800280c <main+0x5ec>)
 800260e:	2101      	movs	r1, #1
 8002610:	2001      	movs	r0, #1
 8002612:	f7ff fdef 	bl	80021f4 <lcd_printf>
				  lcd_printf(1,12, adc2deger);
 8002616:	4a7c      	ldr	r2, [pc, #496]	; (8002808 <main+0x5e8>)
 8002618:	210c      	movs	r1, #12
 800261a:	2001      	movs	r0, #1
 800261c:	f7ff fdea 	bl	80021f4 <lcd_printf>
				  lcd_printf(2,1,">GERI           ");
 8002620:	4a7b      	ldr	r2, [pc, #492]	; (8002810 <main+0x5f0>)
 8002622:	2101      	movs	r1, #1
 8002624:	2002      	movs	r0, #2
 8002626:	f7ff fde5 	bl	80021f4 <lcd_printf>

				  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 800262a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800262e:	4874      	ldr	r0, [pc, #464]	; (8002800 <main+0x5e0>)
 8002630:	f7fe fb8e 	bl	8000d50 <HAL_GPIO_ReadPin>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <main+0x41e>
				  {
					  a = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	71fb      	strb	r3, [r7, #7]
				  }
			  }
/*---------------------------ADC izle---------------------------*/
/*------------------------ADC el ile Ayar-----------------------*/
			  if(a == 80)
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	2b50      	cmp	r3, #80	; 0x50
 8002642:	d11b      	bne.n	800267c <main+0x45c>
			  {
				  adc2 = HAL_ADC_GetValue(&hadc1);
 8002644:	4873      	ldr	r0, [pc, #460]	; (8002814 <main+0x5f4>)
 8002646:	f7fd ff8b 	bl	8000560 <HAL_ADC_GetValue>
 800264a:	4602      	mov	r2, r0
 800264c:	4b6b      	ldr	r3, [pc, #428]	; (80027fc <main+0x5dc>)
 800264e:	601a      	str	r2, [r3, #0]

				  sprintf(adc2deger, "%u    ", adc2);
 8002650:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <main+0x5dc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	496b      	ldr	r1, [pc, #428]	; (8002804 <main+0x5e4>)
 8002658:	486b      	ldr	r0, [pc, #428]	; (8002808 <main+0x5e8>)
 800265a:	f000 febf 	bl	80033dc <siprintf>
			  	  lcd_printf(1,1,"ADC Deger Ayar  ");
 800265e:	4a6e      	ldr	r2, [pc, #440]	; (8002818 <main+0x5f8>)
 8002660:	2101      	movs	r1, #1
 8002662:	2001      	movs	r0, #1
 8002664:	f7ff fdc6 	bl	80021f4 <lcd_printf>
			  	  lcd_printf(2,11, sondeger);
 8002668:	4a6c      	ldr	r2, [pc, #432]	; (800281c <main+0x5fc>)
 800266a:	210b      	movs	r1, #11
 800266c:	2002      	movs	r0, #2
 800266e:	f7ff fdc1 	bl	80021f4 <lcd_printf>
			  	  lcd_printf(2,1,"OK ");
 8002672:	4a6b      	ldr	r2, [pc, #428]	; (8002820 <main+0x600>)
 8002674:	2101      	movs	r1, #1
 8002676:	2002      	movs	r0, #2
 8002678:	f7ff fdbc 	bl	80021f4 <lcd_printf>
			  }
			  	  //1. basamak
			  	  if(a == 81)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	2b51      	cmp	r3, #81	; 0x51
 8002680:	f040 80db 	bne.w	800283a <main+0x61a>
				  {
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002684:	2200      	movs	r2, #0
 8002686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800268a:	485d      	ldr	r0, [pc, #372]	; (8002800 <main+0x5e0>)
 800268c:	f7fe fb77 	bl	8000d7e <HAL_GPIO_WritePin>
					  b = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	71bb      	strb	r3, [r7, #6]
			  		  while(1)
			  		  {
					  adc2 = HAL_ADC_GetValue(&hadc1);
 8002694:	485f      	ldr	r0, [pc, #380]	; (8002814 <main+0x5f4>)
 8002696:	f7fd ff63 	bl	8000560 <HAL_ADC_GetValue>
 800269a:	4602      	mov	r2, r0
 800269c:	4b57      	ldr	r3, [pc, #348]	; (80027fc <main+0x5dc>)
 800269e:	601a      	str	r2, [r3, #0]

				  	  if(adc2 < 400 && adc2 > 0)
 80026a0:	4b56      	ldr	r3, [pc, #344]	; (80027fc <main+0x5dc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80026a8:	d205      	bcs.n	80026b6 <main+0x496>
 80026aa:	4b54      	ldr	r3, [pc, #336]	; (80027fc <main+0x5dc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <main+0x496>
				  	  {
					  	  adc3deger1 = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	717b      	strb	r3, [r7, #5]
				  	  }
				  	  if(adc3 > 400 && adc2 < 800)
 80026b6:	4b5b      	ldr	r3, [pc, #364]	; (8002824 <main+0x604>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80026be:	d906      	bls.n	80026ce <main+0x4ae>
 80026c0:	4b4e      	ldr	r3, [pc, #312]	; (80027fc <main+0x5dc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80026c8:	d201      	bcs.n	80026ce <main+0x4ae>
				  	  {
					  	  adc3deger1 = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	717b      	strb	r3, [r7, #5]
				  	  }
				  	  if(adc2 > 800 && adc2 < 1200)
 80026ce:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <main+0x5dc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80026d6:	d906      	bls.n	80026e6 <main+0x4c6>
 80026d8:	4b48      	ldr	r3, [pc, #288]	; (80027fc <main+0x5dc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80026e0:	d201      	bcs.n	80026e6 <main+0x4c6>
				  	  {
					  	  adc3deger1 = 2;
 80026e2:	2302      	movs	r3, #2
 80026e4:	717b      	strb	r3, [r7, #5]
				  	  }
				  	  if(adc2 > 1200 && adc2 < 1600)
 80026e6:	4b45      	ldr	r3, [pc, #276]	; (80027fc <main+0x5dc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80026ee:	d906      	bls.n	80026fe <main+0x4de>
 80026f0:	4b42      	ldr	r3, [pc, #264]	; (80027fc <main+0x5dc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80026f8:	d201      	bcs.n	80026fe <main+0x4de>
				  	  {
					  	  adc3deger1 = 3;
 80026fa:	2303      	movs	r3, #3
 80026fc:	717b      	strb	r3, [r7, #5]
				  	  }
				  	  if(adc2 > 1600 && adc2 < 2000)
 80026fe:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <main+0x5dc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002706:	d906      	bls.n	8002716 <main+0x4f6>
 8002708:	4b3c      	ldr	r3, [pc, #240]	; (80027fc <main+0x5dc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002710:	d201      	bcs.n	8002716 <main+0x4f6>
				  	  {
					  	  adc3deger1 = 4;
 8002712:	2304      	movs	r3, #4
 8002714:	717b      	strb	r3, [r7, #5]
				  	  }
				  	  if(adc2 > 2000 && adc2 < 2400)
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <main+0x5dc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800271e:	d906      	bls.n	800272e <main+0x50e>
 8002720:	4b36      	ldr	r3, [pc, #216]	; (80027fc <main+0x5dc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002728:	d201      	bcs.n	800272e <main+0x50e>
				  	  {
					  	  adc3deger1 = 5;
 800272a:	2305      	movs	r3, #5
 800272c:	717b      	strb	r3, [r7, #5]
				  	  }
				  	  if(adc2 > 2400 && adc2 < 2800)
 800272e:	4b33      	ldr	r3, [pc, #204]	; (80027fc <main+0x5dc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002736:	d906      	bls.n	8002746 <main+0x526>
 8002738:	4b30      	ldr	r3, [pc, #192]	; (80027fc <main+0x5dc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8002740:	d201      	bcs.n	8002746 <main+0x526>
				  	  {
					  	  adc3deger1 = 6;
 8002742:	2306      	movs	r3, #6
 8002744:	717b      	strb	r3, [r7, #5]
				  	  }
				  	  if(adc2 > 2800 && adc2 < 3200)
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <main+0x5dc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800274e:	d906      	bls.n	800275e <main+0x53e>
 8002750:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <main+0x5dc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002758:	d201      	bcs.n	800275e <main+0x53e>
				  	  {
					  	  adc3deger1 = 7;
 800275a:	2307      	movs	r3, #7
 800275c:	717b      	strb	r3, [r7, #5]
				  	  }
				  	  if(adc2 > 3200 && adc2 < 3600)
 800275e:	4b27      	ldr	r3, [pc, #156]	; (80027fc <main+0x5dc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002766:	d906      	bls.n	8002776 <main+0x556>
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <main+0x5dc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002770:	d201      	bcs.n	8002776 <main+0x556>
				  	  {
					  	  adc3deger1 = 8;
 8002772:	2308      	movs	r3, #8
 8002774:	717b      	strb	r3, [r7, #5]
				  	  }
				  	  if(adc2 > 3600 && adc2 < 4200)
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <main+0x5dc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800277e:	d907      	bls.n	8002790 <main+0x570>
 8002780:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <main+0x5dc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f241 0267 	movw	r2, #4199	; 0x1067
 8002788:	4293      	cmp	r3, r2
 800278a:	d801      	bhi.n	8002790 <main+0x570>
				  	  {
					  	  adc3deger1 = 9;
 800278c:	2309      	movs	r3, #9
 800278e:	717b      	strb	r3, [r7, #5]
				  	  }

				  	  sprintf(adc3char1, "%u", adc3deger1);
 8002790:	797b      	ldrb	r3, [r7, #5]
 8002792:	461a      	mov	r2, r3
 8002794:	4924      	ldr	r1, [pc, #144]	; (8002828 <main+0x608>)
 8002796:	4825      	ldr	r0, [pc, #148]	; (800282c <main+0x60c>)
 8002798:	f000 fe20 	bl	80033dc <siprintf>

				  	  bekleme[3] = adc3deger1 * 1000;
 800279c:	797b      	ldrb	r3, [r7, #5]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	0152      	lsls	r2, r2, #5
 80027a4:	1ad2      	subs	r2, r2, r3
 80027a6:	0092      	lsls	r2, r2, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <main+0x610>)
 80027b0:	80da      	strh	r2, [r3, #6]

				  	  lcd_printf(1,1,"ADC Deger Ayar  ");
 80027b2:	4a19      	ldr	r2, [pc, #100]	; (8002818 <main+0x5f8>)
 80027b4:	2101      	movs	r1, #1
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7ff fd1c 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,11, adc3char1);
 80027bc:	4a1b      	ldr	r2, [pc, #108]	; (800282c <main+0x60c>)
 80027be:	210b      	movs	r1, #11
 80027c0:	2002      	movs	r0, #2
 80027c2:	f7ff fd17 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,1,"OK -->  ");
 80027c6:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <main+0x614>)
 80027c8:	2101      	movs	r1, #1
 80027ca:	2002      	movs	r0, #2
 80027cc:	f7ff fd12 	bl	80021f4 <lcd_printf>
				  	  //lcd_printf(2,12, adc3char1);
				  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15))
 80027d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027d4:	480a      	ldr	r0, [pc, #40]	; (8002800 <main+0x5e0>)
 80027d6:	f7fe fabb 	bl	8000d50 <HAL_GPIO_ReadPin>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d108      	bne.n	80027f2 <main+0x5d2>
				  	  {
				  		  break;
				  	  }
				      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 80027e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027e4:	4806      	ldr	r0, [pc, #24]	; (8002800 <main+0x5e0>)
 80027e6:	f7fe fab3 	bl	8000d50 <HAL_GPIO_ReadPin>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d123      	bne.n	8002838 <main+0x618>
					  adc2 = HAL_ADC_GetValue(&hadc1);
 80027f0:	e750      	b.n	8002694 <main+0x474>
				  		  break;
 80027f2:	bf00      	nop
 80027f4:	e021      	b.n	800283a <main+0x61a>
 80027f6:	bf00      	nop
 80027f8:	200000f4 	.word	0x200000f4
 80027fc:	200000ec 	.word	0x200000ec
 8002800:	40010800 	.word	0x40010800
 8002804:	08003da4 	.word	0x08003da4
 8002808:	20000008 	.word	0x20000008
 800280c:	08003dd4 	.word	0x08003dd4
 8002810:	08003de8 	.word	0x08003de8
 8002814:	20000118 	.word	0x20000118
 8002818:	08003dfc 	.word	0x08003dfc
 800281c:	20000058 	.word	0x20000058
 8002820:	08003e10 	.word	0x08003e10
 8002824:	200000f0 	.word	0x200000f0
 8002828:	08003e14 	.word	0x08003e14
 800282c:	20000018 	.word	0x20000018
 8002830:	2000010c 	.word	0x2000010c
 8002834:	08003e18 	.word	0x08003e18
				  	  {
				  		  break;
 8002838:	bf00      	nop
				  	  }
			  		  }
				  }

				  //2. basamak
			  	  if(a == 82)
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	2b52      	cmp	r3, #82	; 0x52
 800283e:	f040 80cc 	bne.w	80029da <main+0x7ba>
				  {
			  		  while(1)
			  		  {
					  adc2 = HAL_ADC_GetValue(&hadc1);
 8002842:	485c      	ldr	r0, [pc, #368]	; (80029b4 <main+0x794>)
 8002844:	f7fd fe8c 	bl	8000560 <HAL_ADC_GetValue>
 8002848:	4602      	mov	r2, r0
 800284a:	4b5b      	ldr	r3, [pc, #364]	; (80029b8 <main+0x798>)
 800284c:	601a      	str	r2, [r3, #0]

				  	  if(adc2 < 400 && adc2 > 0)
 800284e:	4b5a      	ldr	r3, [pc, #360]	; (80029b8 <main+0x798>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002856:	d205      	bcs.n	8002864 <main+0x644>
 8002858:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <main+0x798>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <main+0x644>
				  	  {
					  	  adc3deger2 = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	713b      	strb	r3, [r7, #4]
				  	  }
				  	  if(adc2 > 400 && adc2 < 800)
 8002864:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <main+0x798>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800286c:	d906      	bls.n	800287c <main+0x65c>
 800286e:	4b52      	ldr	r3, [pc, #328]	; (80029b8 <main+0x798>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002876:	d201      	bcs.n	800287c <main+0x65c>
				  	  {
					  	  adc3deger2 = 1;
 8002878:	2301      	movs	r3, #1
 800287a:	713b      	strb	r3, [r7, #4]
				  	  }
				  	  if(adc2 > 800 && adc2 < 1200)
 800287c:	4b4e      	ldr	r3, [pc, #312]	; (80029b8 <main+0x798>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002884:	d906      	bls.n	8002894 <main+0x674>
 8002886:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <main+0x798>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800288e:	d201      	bcs.n	8002894 <main+0x674>
				  	  {
					  	  adc3deger2 = 2;
 8002890:	2302      	movs	r3, #2
 8002892:	713b      	strb	r3, [r7, #4]
				  	  }
				  	  if(adc2 > 1200 && adc2 < 1600)
 8002894:	4b48      	ldr	r3, [pc, #288]	; (80029b8 <main+0x798>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800289c:	d906      	bls.n	80028ac <main+0x68c>
 800289e:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <main+0x798>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80028a6:	d201      	bcs.n	80028ac <main+0x68c>
				  	  {
					  	  adc3deger2 = 3;
 80028a8:	2303      	movs	r3, #3
 80028aa:	713b      	strb	r3, [r7, #4]
				  	  }
				  	  if(adc2 > 1600 && adc2 < 2000)
 80028ac:	4b42      	ldr	r3, [pc, #264]	; (80029b8 <main+0x798>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80028b4:	d906      	bls.n	80028c4 <main+0x6a4>
 80028b6:	4b40      	ldr	r3, [pc, #256]	; (80029b8 <main+0x798>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028be:	d201      	bcs.n	80028c4 <main+0x6a4>
				  	  {
					  	  adc3deger2 = 4;
 80028c0:	2304      	movs	r3, #4
 80028c2:	713b      	strb	r3, [r7, #4]
				  	  }
				  	  if(adc2 > 2000 && adc2 < 2400)
 80028c4:	4b3c      	ldr	r3, [pc, #240]	; (80029b8 <main+0x798>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028cc:	d906      	bls.n	80028dc <main+0x6bc>
 80028ce:	4b3a      	ldr	r3, [pc, #232]	; (80029b8 <main+0x798>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80028d6:	d201      	bcs.n	80028dc <main+0x6bc>
				  	  {
					  	  adc3deger2 = 5;
 80028d8:	2305      	movs	r3, #5
 80028da:	713b      	strb	r3, [r7, #4]
				  	  }
				  	  if(adc2 > 2400 && adc2 < 2800)
 80028dc:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <main+0x798>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80028e4:	d906      	bls.n	80028f4 <main+0x6d4>
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <main+0x798>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80028ee:	d201      	bcs.n	80028f4 <main+0x6d4>
				  	  {
					  	  adc3deger2 = 6;
 80028f0:	2306      	movs	r3, #6
 80028f2:	713b      	strb	r3, [r7, #4]
				  	  }
				  	  if(adc2 > 2800 && adc2 < 3200)
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <main+0x798>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80028fc:	d906      	bls.n	800290c <main+0x6ec>
 80028fe:	4b2e      	ldr	r3, [pc, #184]	; (80029b8 <main+0x798>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002906:	d201      	bcs.n	800290c <main+0x6ec>
				  	  {
					  	  adc3deger2 = 7;
 8002908:	2307      	movs	r3, #7
 800290a:	713b      	strb	r3, [r7, #4]
				  	  }
				  	  if(adc2 > 3200 && adc2 < 3600)
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <main+0x798>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002914:	d906      	bls.n	8002924 <main+0x704>
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <main+0x798>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800291e:	d201      	bcs.n	8002924 <main+0x704>
				  	  {
					  	  adc3deger2 = 8;
 8002920:	2308      	movs	r3, #8
 8002922:	713b      	strb	r3, [r7, #4]
				  	  }
				  	  if(adc2 > 3600 && adc2 < 4200)
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <main+0x798>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800292c:	d907      	bls.n	800293e <main+0x71e>
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <main+0x798>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f241 0267 	movw	r2, #4199	; 0x1067
 8002936:	4293      	cmp	r3, r2
 8002938:	d801      	bhi.n	800293e <main+0x71e>
				  	  {
					  	  adc3deger2 = 9;
 800293a:	2309      	movs	r3, #9
 800293c:	713b      	strb	r3, [r7, #4]
				  	  }

				  	  sprintf(adc3char2, "%u", adc3deger2);
 800293e:	793b      	ldrb	r3, [r7, #4]
 8002940:	461a      	mov	r2, r3
 8002942:	491e      	ldr	r1, [pc, #120]	; (80029bc <main+0x79c>)
 8002944:	481e      	ldr	r0, [pc, #120]	; (80029c0 <main+0x7a0>)
 8002946:	f000 fd49 	bl	80033dc <siprintf>

				  	  bekleme[2] = adc3deger2 * 100;
 800294a:	793b      	ldrb	r3, [r7, #4]
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	4413      	add	r3, r2
 8002954:	461a      	mov	r2, r3
 8002956:	0091      	lsls	r1, r2, #2
 8002958:	461a      	mov	r2, r3
 800295a:	460b      	mov	r3, r1
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	b29a      	uxth	r2, r3
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <main+0x7a4>)
 8002964:	809a      	strh	r2, [r3, #4]
				  	  lcd_printf(2,11, adc3char1);
 8002966:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <main+0x7a8>)
 8002968:	210b      	movs	r1, #11
 800296a:	2002      	movs	r0, #2
 800296c:	f7ff fc42 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(1,1,"ADC Deger Ayar  ");
 8002970:	4a16      	ldr	r2, [pc, #88]	; (80029cc <main+0x7ac>)
 8002972:	2101      	movs	r1, #1
 8002974:	2001      	movs	r0, #1
 8002976:	f7ff fc3d 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,12, adc3char2);
 800297a:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <main+0x7a0>)
 800297c:	210c      	movs	r1, #12
 800297e:	2002      	movs	r0, #2
 8002980:	f7ff fc38 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,1,"OK -->  ");
 8002984:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <main+0x7b0>)
 8002986:	2101      	movs	r1, #1
 8002988:	2002      	movs	r0, #2
 800298a:	f7ff fc33 	bl	80021f4 <lcd_printf>

				  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15))
 800298e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002992:	4810      	ldr	r0, [pc, #64]	; (80029d4 <main+0x7b4>)
 8002994:	f7fe f9dc 	bl	8000d50 <HAL_GPIO_ReadPin>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d108      	bne.n	80029b0 <main+0x790>
				  	  {
				  		  break;
				  	  }
				      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 800299e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a2:	480c      	ldr	r0, [pc, #48]	; (80029d4 <main+0x7b4>)
 80029a4:	f7fe f9d4 	bl	8000d50 <HAL_GPIO_ReadPin>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d114      	bne.n	80029d8 <main+0x7b8>
					  adc2 = HAL_ADC_GetValue(&hadc1);
 80029ae:	e748      	b.n	8002842 <main+0x622>
				  		  break;
 80029b0:	bf00      	nop
 80029b2:	e012      	b.n	80029da <main+0x7ba>
 80029b4:	20000118 	.word	0x20000118
 80029b8:	200000ec 	.word	0x200000ec
 80029bc:	08003e14 	.word	0x08003e14
 80029c0:	20000028 	.word	0x20000028
 80029c4:	2000010c 	.word	0x2000010c
 80029c8:	20000018 	.word	0x20000018
 80029cc:	08003dfc 	.word	0x08003dfc
 80029d0:	08003e18 	.word	0x08003e18
 80029d4:	40010800 	.word	0x40010800
				  	  {
				  		  break;
 80029d8:	bf00      	nop
				  	  }
			  		  }
				  }

				  //3. basamak
			  	  if(a == 83)
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	2b53      	cmp	r3, #83	; 0x53
 80029de:	f040 80ce 	bne.w	8002b7e <main+0x95e>
				  {
			  		  while(1)
			  		  {
					  adc2 = HAL_ADC_GetValue(&hadc1);
 80029e2:	485c      	ldr	r0, [pc, #368]	; (8002b54 <main+0x934>)
 80029e4:	f7fd fdbc 	bl	8000560 <HAL_ADC_GetValue>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <main+0x938>)
 80029ec:	601a      	str	r2, [r3, #0]

				  	  if(adc2 < 400 && adc2 > 0)
 80029ee:	4b5a      	ldr	r3, [pc, #360]	; (8002b58 <main+0x938>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80029f6:	d205      	bcs.n	8002a04 <main+0x7e4>
 80029f8:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <main+0x938>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <main+0x7e4>
				  	  {
					  	  adc3deger3 = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	70fb      	strb	r3, [r7, #3]
				  	  }
				  	  if(adc2 > 400 && adc2 < 800)
 8002a04:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <main+0x938>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002a0c:	d906      	bls.n	8002a1c <main+0x7fc>
 8002a0e:	4b52      	ldr	r3, [pc, #328]	; (8002b58 <main+0x938>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002a16:	d201      	bcs.n	8002a1c <main+0x7fc>
				  	  {
					  	  adc3deger3 = 1;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	70fb      	strb	r3, [r7, #3]
				  	  }
				  	  if(adc2 > 800 && adc2 < 1200)
 8002a1c:	4b4e      	ldr	r3, [pc, #312]	; (8002b58 <main+0x938>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002a24:	d906      	bls.n	8002a34 <main+0x814>
 8002a26:	4b4c      	ldr	r3, [pc, #304]	; (8002b58 <main+0x938>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002a2e:	d201      	bcs.n	8002a34 <main+0x814>
				  	  {
					  	  adc3deger3 = 2;
 8002a30:	2302      	movs	r3, #2
 8002a32:	70fb      	strb	r3, [r7, #3]
				  	  }
				  	  if(adc2 > 1200 && adc2 < 1600)
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <main+0x938>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002a3c:	d906      	bls.n	8002a4c <main+0x82c>
 8002a3e:	4b46      	ldr	r3, [pc, #280]	; (8002b58 <main+0x938>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002a46:	d201      	bcs.n	8002a4c <main+0x82c>
				  	  {
					  	  adc3deger3 = 3;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	70fb      	strb	r3, [r7, #3]
				  	  }
				  	  if(adc2 > 1600 && adc2 < 2000)
 8002a4c:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <main+0x938>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002a54:	d906      	bls.n	8002a64 <main+0x844>
 8002a56:	4b40      	ldr	r3, [pc, #256]	; (8002b58 <main+0x938>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a5e:	d201      	bcs.n	8002a64 <main+0x844>
				  	  {
					  	  adc3deger3 = 4;
 8002a60:	2304      	movs	r3, #4
 8002a62:	70fb      	strb	r3, [r7, #3]
				  	  }
				  	  if(adc2 > 2000 && adc2 < 2400)
 8002a64:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <main+0x938>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a6c:	d906      	bls.n	8002a7c <main+0x85c>
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <main+0x938>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002a76:	d201      	bcs.n	8002a7c <main+0x85c>
				  	  {
					  	  adc3deger3 = 5;
 8002a78:	2305      	movs	r3, #5
 8002a7a:	70fb      	strb	r3, [r7, #3]
				  	  }
				  	  if(adc2 > 2400 && adc2 < 2800)
 8002a7c:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <main+0x938>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002a84:	d906      	bls.n	8002a94 <main+0x874>
 8002a86:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <main+0x938>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8002a8e:	d201      	bcs.n	8002a94 <main+0x874>
				  	  {
					  	  adc3deger3 = 6;
 8002a90:	2306      	movs	r3, #6
 8002a92:	70fb      	strb	r3, [r7, #3]
				  	  }
				  	  if(adc2 > 2800 && adc2 < 3200)
 8002a94:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <main+0x938>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8002a9c:	d906      	bls.n	8002aac <main+0x88c>
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <main+0x938>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002aa6:	d201      	bcs.n	8002aac <main+0x88c>
				  	  {
					  	  adc3deger3 = 7;
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	70fb      	strb	r3, [r7, #3]
				  	  }
				  	  if(adc2 > 3200 && adc2 < 3600)
 8002aac:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <main+0x938>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002ab4:	d906      	bls.n	8002ac4 <main+0x8a4>
 8002ab6:	4b28      	ldr	r3, [pc, #160]	; (8002b58 <main+0x938>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002abe:	d201      	bcs.n	8002ac4 <main+0x8a4>
				  	  {
					  	  adc3deger3 = 8;
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	70fb      	strb	r3, [r7, #3]
				  	  }
				  	  if(adc2 > 3600 && adc2 < 4200)
 8002ac4:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <main+0x938>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002acc:	d907      	bls.n	8002ade <main+0x8be>
 8002ace:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <main+0x938>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f241 0267 	movw	r2, #4199	; 0x1067
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d801      	bhi.n	8002ade <main+0x8be>
				  	  {
					  	  adc3deger3 = 9;
 8002ada:	2309      	movs	r3, #9
 8002adc:	70fb      	strb	r3, [r7, #3]
				  	  }

				  	  sprintf(adc3char3, "%u", adc3deger3);
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	491e      	ldr	r1, [pc, #120]	; (8002b5c <main+0x93c>)
 8002ae4:	481e      	ldr	r0, [pc, #120]	; (8002b60 <main+0x940>)
 8002ae6:	f000 fc79 	bl	80033dc <siprintf>

				  	  bekleme[1] = adc3deger3 * 10;
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <main+0x944>)
 8002afa:	805a      	strh	r2, [r3, #2]
				  	  lcd_printf(2,11, adc3char1);
 8002afc:	4a1a      	ldr	r2, [pc, #104]	; (8002b68 <main+0x948>)
 8002afe:	210b      	movs	r1, #11
 8002b00:	2002      	movs	r0, #2
 8002b02:	f7ff fb77 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,12, adc3char2);
 8002b06:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <main+0x94c>)
 8002b08:	210c      	movs	r1, #12
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f7ff fb72 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(1,1,"ADC Deger Ayar  ");
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <main+0x950>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	2001      	movs	r0, #1
 8002b16:	f7ff fb6d 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,13, adc3char3);
 8002b1a:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <main+0x940>)
 8002b1c:	210d      	movs	r1, #13
 8002b1e:	2002      	movs	r0, #2
 8002b20:	f7ff fb68 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,1,"OK --> ");
 8002b24:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <main+0x954>)
 8002b26:	2101      	movs	r1, #1
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f7ff fb63 	bl	80021f4 <lcd_printf>

				  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15))
 8002b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b32:	4811      	ldr	r0, [pc, #68]	; (8002b78 <main+0x958>)
 8002b34:	f7fe f90c 	bl	8000d50 <HAL_GPIO_ReadPin>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d108      	bne.n	8002b50 <main+0x930>
				  	  {
				  		  break;
				  	  }
				      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8002b3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b42:	480d      	ldr	r0, [pc, #52]	; (8002b78 <main+0x958>)
 8002b44:	f7fe f904 	bl	8000d50 <HAL_GPIO_ReadPin>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <main+0x95c>
					  adc2 = HAL_ADC_GetValue(&hadc1);
 8002b4e:	e748      	b.n	80029e2 <main+0x7c2>
				  		  break;
 8002b50:	bf00      	nop
 8002b52:	e014      	b.n	8002b7e <main+0x95e>
 8002b54:	20000118 	.word	0x20000118
 8002b58:	200000ec 	.word	0x200000ec
 8002b5c:	08003e14 	.word	0x08003e14
 8002b60:	20000038 	.word	0x20000038
 8002b64:	2000010c 	.word	0x2000010c
 8002b68:	20000018 	.word	0x20000018
 8002b6c:	20000028 	.word	0x20000028
 8002b70:	08003dfc 	.word	0x08003dfc
 8002b74:	08003e24 	.word	0x08003e24
 8002b78:	40010800 	.word	0x40010800
				  	  {
				  		  break;
 8002b7c:	bf00      	nop
				  	  }
			  		  }
				  }

				  //4. basamak
			  	  if(a == 84)
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	2b54      	cmp	r3, #84	; 0x54
 8002b82:	f040 80ba 	bne.w	8002cfa <main+0xada>
				  {
			  		  while(1)
			  		  {
					  //a = 93;
					  adc2 = HAL_ADC_GetValue(&hadc1);
 8002b86:	4889      	ldr	r0, [pc, #548]	; (8002dac <main+0xb8c>)
 8002b88:	f7fd fcea 	bl	8000560 <HAL_ADC_GetValue>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <main+0xb90>)
 8002b90:	601a      	str	r2, [r3, #0]

				  	  if(adc2 < 400 && adc2 > 0)
 8002b92:	4b87      	ldr	r3, [pc, #540]	; (8002db0 <main+0xb90>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002b9a:	d205      	bcs.n	8002ba8 <main+0x988>
 8002b9c:	4b84      	ldr	r3, [pc, #528]	; (8002db0 <main+0xb90>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <main+0x988>
				  	  {
					  	  adc3deger4 = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	70bb      	strb	r3, [r7, #2]
				  	  }
				  	  if(adc2 > 400 && adc2 < 800)
 8002ba8:	4b81      	ldr	r3, [pc, #516]	; (8002db0 <main+0xb90>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002bb0:	d906      	bls.n	8002bc0 <main+0x9a0>
 8002bb2:	4b7f      	ldr	r3, [pc, #508]	; (8002db0 <main+0xb90>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002bba:	d201      	bcs.n	8002bc0 <main+0x9a0>
				  	  {
					  	  adc3deger4 = 1;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	70bb      	strb	r3, [r7, #2]
				  	  }
				  	  if(adc2 > 800 && adc2 < 1200)
 8002bc0:	4b7b      	ldr	r3, [pc, #492]	; (8002db0 <main+0xb90>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002bc8:	d906      	bls.n	8002bd8 <main+0x9b8>
 8002bca:	4b79      	ldr	r3, [pc, #484]	; (8002db0 <main+0xb90>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002bd2:	d201      	bcs.n	8002bd8 <main+0x9b8>
				  	  {
					  	  adc3deger4 = 2;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	70bb      	strb	r3, [r7, #2]
				  	  }
				  	  if(adc2 > 1200 && adc2 < 1600)
 8002bd8:	4b75      	ldr	r3, [pc, #468]	; (8002db0 <main+0xb90>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002be0:	d906      	bls.n	8002bf0 <main+0x9d0>
 8002be2:	4b73      	ldr	r3, [pc, #460]	; (8002db0 <main+0xb90>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002bea:	d201      	bcs.n	8002bf0 <main+0x9d0>
				  	  {
					  	  adc3deger4 = 3;
 8002bec:	2303      	movs	r3, #3
 8002bee:	70bb      	strb	r3, [r7, #2]
				  	  }
				  	  if(adc2 > 1600 && adc2 < 2000)
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	; (8002db0 <main+0xb90>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002bf8:	d906      	bls.n	8002c08 <main+0x9e8>
 8002bfa:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <main+0xb90>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c02:	d201      	bcs.n	8002c08 <main+0x9e8>
				  	  {
					  	  adc3deger4 = 4;
 8002c04:	2304      	movs	r3, #4
 8002c06:	70bb      	strb	r3, [r7, #2]
				  	  }
				  	  if(adc2 > 2000 && adc2 < 2400)
 8002c08:	4b69      	ldr	r3, [pc, #420]	; (8002db0 <main+0xb90>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c10:	d906      	bls.n	8002c20 <main+0xa00>
 8002c12:	4b67      	ldr	r3, [pc, #412]	; (8002db0 <main+0xb90>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002c1a:	d201      	bcs.n	8002c20 <main+0xa00>
				  	  {
					  	  adc3deger4 = 5;
 8002c1c:	2305      	movs	r3, #5
 8002c1e:	70bb      	strb	r3, [r7, #2]
				  	  }
				  	  if(adc2 > 2400 && adc2 < 2800)
 8002c20:	4b63      	ldr	r3, [pc, #396]	; (8002db0 <main+0xb90>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002c28:	d906      	bls.n	8002c38 <main+0xa18>
 8002c2a:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <main+0xb90>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8002c32:	d201      	bcs.n	8002c38 <main+0xa18>
				  	  {
					  	  adc3deger4 = 6;
 8002c34:	2306      	movs	r3, #6
 8002c36:	70bb      	strb	r3, [r7, #2]
				  	  }
				  	  if(adc2 > 2800 && adc2 < 3200)
 8002c38:	4b5d      	ldr	r3, [pc, #372]	; (8002db0 <main+0xb90>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8002c40:	d906      	bls.n	8002c50 <main+0xa30>
 8002c42:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <main+0xb90>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002c4a:	d201      	bcs.n	8002c50 <main+0xa30>
				  	  {
					  	  adc3deger4 = 7;
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	70bb      	strb	r3, [r7, #2]
				  	  }
				  	  if(adc2 > 3200 && adc2 < 3600)
 8002c50:	4b57      	ldr	r3, [pc, #348]	; (8002db0 <main+0xb90>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002c58:	d906      	bls.n	8002c68 <main+0xa48>
 8002c5a:	4b55      	ldr	r3, [pc, #340]	; (8002db0 <main+0xb90>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002c62:	d201      	bcs.n	8002c68 <main+0xa48>
				  	  {
					  	  adc3deger4 = 8;
 8002c64:	2308      	movs	r3, #8
 8002c66:	70bb      	strb	r3, [r7, #2]
				  	  }
				  	  if(adc2 > 3600 && adc2 < 4200)
 8002c68:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <main+0xb90>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002c70:	d907      	bls.n	8002c82 <main+0xa62>
 8002c72:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <main+0xb90>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f241 0267 	movw	r2, #4199	; 0x1067
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d801      	bhi.n	8002c82 <main+0xa62>
				  	  {
					  	  adc3deger4 = 9;
 8002c7e:	2309      	movs	r3, #9
 8002c80:	70bb      	strb	r3, [r7, #2]
				  	  }

				  	  sprintf(adc3char4, "%u", adc3deger4);
 8002c82:	78bb      	ldrb	r3, [r7, #2]
 8002c84:	461a      	mov	r2, r3
 8002c86:	494b      	ldr	r1, [pc, #300]	; (8002db4 <main+0xb94>)
 8002c88:	484b      	ldr	r0, [pc, #300]	; (8002db8 <main+0xb98>)
 8002c8a:	f000 fba7 	bl	80033dc <siprintf>

				  	  bekleme[0] = adc3deger4;
 8002c8e:	78bb      	ldrb	r3, [r7, #2]
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <main+0xb9c>)
 8002c94:	801a      	strh	r2, [r3, #0]
				  	  lcd_printf(2,11, adc3char1);
 8002c96:	4a4a      	ldr	r2, [pc, #296]	; (8002dc0 <main+0xba0>)
 8002c98:	210b      	movs	r1, #11
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f7ff faaa 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,12, adc3char2);
 8002ca0:	4a48      	ldr	r2, [pc, #288]	; (8002dc4 <main+0xba4>)
 8002ca2:	210c      	movs	r1, #12
 8002ca4:	2002      	movs	r0, #2
 8002ca6:	f7ff faa5 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,13, adc3char3);
 8002caa:	4a47      	ldr	r2, [pc, #284]	; (8002dc8 <main+0xba8>)
 8002cac:	210d      	movs	r1, #13
 8002cae:	2002      	movs	r0, #2
 8002cb0:	f7ff faa0 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(1,1,"ADC Deger Ayar  ");
 8002cb4:	4a45      	ldr	r2, [pc, #276]	; (8002dcc <main+0xbac>)
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7ff fa9b 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,14, adc3char4);
 8002cbe:	4a3e      	ldr	r2, [pc, #248]	; (8002db8 <main+0xb98>)
 8002cc0:	210e      	movs	r1, #14
 8002cc2:	2002      	movs	r0, #2
 8002cc4:	f7ff fa96 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,1,"OK --> ");
 8002cc8:	4a41      	ldr	r2, [pc, #260]	; (8002dd0 <main+0xbb0>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2002      	movs	r0, #2
 8002cce:	f7ff fa91 	bl	80021f4 <lcd_printf>

				  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15))
 8002cd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cd6:	483f      	ldr	r0, [pc, #252]	; (8002dd4 <main+0xbb4>)
 8002cd8:	f7fe f83a 	bl	8000d50 <HAL_GPIO_ReadPin>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d108      	bne.n	8002cf4 <main+0xad4>
				  	  {
				  		  break;
				  	  }
				      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8002ce2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ce6:	483b      	ldr	r0, [pc, #236]	; (8002dd4 <main+0xbb4>)
 8002ce8:	f7fe f832 	bl	8000d50 <HAL_GPIO_ReadPin>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <main+0xad8>
					  adc2 = HAL_ADC_GetValue(&hadc1);
 8002cf2:	e748      	b.n	8002b86 <main+0x966>
				  		  break;
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <main+0xada>
				  	  {
				  		  break;
 8002cf8:	bf00      	nop
			  	  adc3deger2 = 0;
			  	  adc3deger3 = 0;
			  	  adc3deger4 = 0;*/


				  if(a == 85)
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	2b55      	cmp	r3, #85	; 0x55
 8002cfe:	f47f aab4 	bne.w	800226a <main+0x4a>
				  {
					  deger = bekleme[0] + bekleme[1] + bekleme[2] + bekleme[3];
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <main+0xb9c>)
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <main+0xb9c>)
 8002d08:	885b      	ldrh	r3, [r3, #2]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <main+0xb9c>)
 8002d10:	889b      	ldrh	r3, [r3, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <main+0xb9c>)
 8002d18:	88db      	ldrh	r3, [r3, #6]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <main+0xbb8>)
 8002d20:	801a      	strh	r2, [r3, #0]

				  	  sprintf(sondeger, "%u", deger);
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <main+0xbb8>)
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	4922      	ldr	r1, [pc, #136]	; (8002db4 <main+0xb94>)
 8002d2a:	482c      	ldr	r0, [pc, #176]	; (8002ddc <main+0xbbc>)
 8002d2c:	f000 fb56 	bl	80033dc <siprintf>

					  lcd_printf(1,1,">GERI           ");
 8002d30:	4a2b      	ldr	r2, [pc, #172]	; (8002de0 <main+0xbc0>)
 8002d32:	2101      	movs	r1, #1
 8002d34:	2001      	movs	r0, #1
 8002d36:	f7ff fa5d 	bl	80021f4 <lcd_printf>
					  lcd_printf(2,1,"                ");
 8002d3a:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <main+0xbc4>)
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	2002      	movs	r0, #2
 8002d40:	f7ff fa58 	bl	80021f4 <lcd_printf>
				  	  lcd_printf(2,12, sondeger);
 8002d44:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <main+0xbbc>)
 8002d46:	210c      	movs	r1, #12
 8002d48:	2002      	movs	r0, #2
 8002d4a:	f7ff fa53 	bl	80021f4 <lcd_printf>

					  b = 3;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	71bb      	strb	r3, [r7, #6]

					  if (HAL_GetTick() > ledim)
 8002d52:	f7fd fa53 	bl	80001fc <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <main+0xbc8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d918      	bls.n	8002d92 <main+0xb72>
					  	  {
					  	      ledim = HAL_GetTick() + deger;
 8002d60:	f7fd fa4c 	bl	80001fc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <main+0xbb8>)
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <main+0xbc8>)
 8002d6e:	6013      	str	r3, [r2, #0]
					  	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 8002d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d74:	4817      	ldr	r0, [pc, #92]	; (8002dd4 <main+0xbb4>)
 8002d76:	f7fd ffeb 	bl	8000d50 <HAL_GPIO_ReadPin>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d8c:	4811      	ldr	r0, [pc, #68]	; (8002dd4 <main+0xbb4>)
 8002d8e:	f7fd fff6 	bl	8000d7e <HAL_GPIO_WritePin>
					  	  }

					  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8002d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d96:	480f      	ldr	r0, [pc, #60]	; (8002dd4 <main+0xbb4>)
 8002d98:	f7fd ffda 	bl	8000d50 <HAL_GPIO_ReadPin>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f43f aa63 	beq.w	800226a <main+0x4a>
					  {
						  a = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(2);
 8002da8:	f7ff ba5f 	b.w	800226a <main+0x4a>
 8002dac:	20000118 	.word	0x20000118
 8002db0:	200000ec 	.word	0x200000ec
 8002db4:	08003e14 	.word	0x08003e14
 8002db8:	20000048 	.word	0x20000048
 8002dbc:	2000010c 	.word	0x2000010c
 8002dc0:	20000018 	.word	0x20000018
 8002dc4:	20000028 	.word	0x20000028
 8002dc8:	20000038 	.word	0x20000038
 8002dcc:	08003dfc 	.word	0x08003dfc
 8002dd0:	08003e24 	.word	0x08003e24
 8002dd4:	40010800 	.word	0x40010800
 8002dd8:	200000f8 	.word	0x200000f8
 8002ddc:	20000058 	.word	0x20000058
 8002de0:	08003de8 	.word	0x08003de8
 8002de4:	08003e2c 	.word	0x08003e2c
 8002de8:	200000f4 	.word	0x200000f4

08002dec <HAL_TIM_PeriodElapsedCallback>:

  /* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim -> Instance)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d104      	bne.n	8002e08 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8002dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e02:	4804      	ldr	r0, [pc, #16]	; (8002e14 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002e04:	f7fd ffd3 	bl	8000dae <HAL_GPIO_TogglePin>
	}
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40010800 	.word	0x40010800

08002e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b094      	sub	sp, #80	; 0x50
 8002e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e22:	2228      	movs	r2, #40	; 0x28
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fad0 	bl	80033cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002e52:	2300      	movs	r3, #0
 8002e54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e56:	2301      	movs	r3, #1
 8002e58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e64:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002e68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd ffae 	bl	8000dd0 <HAL_RCC_OscConfig>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002e7a:	f000 f929 	bl	80030d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e7e:	230f      	movs	r3, #15
 8002e80:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e82:	2302      	movs	r3, #2
 8002e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe f9fc 	bl	8001298 <HAL_RCC_ClockConfig>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002ea6:	f000 f913 	bl	80030d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eb2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fb7a 	bl	80015b0 <HAL_RCCEx_PeriphCLKConfig>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002ec2:	f000 f905 	bl	80030d0 <Error_Handler>
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3750      	adds	r7, #80	; 0x50
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <MX_ADC1_Init+0x74>)
 8002ee2:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <MX_ADC1_Init+0x78>)
 8002ee4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <MX_ADC1_Init+0x74>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <MX_ADC1_Init+0x74>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <MX_ADC1_Init+0x74>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <MX_ADC1_Init+0x74>)
 8002efa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002efe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f00:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <MX_ADC1_Init+0x74>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <MX_ADC1_Init+0x74>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f0c:	480d      	ldr	r0, [pc, #52]	; (8002f44 <MX_ADC1_Init+0x74>)
 8002f0e:	f7fd f9a1 	bl	8000254 <HAL_ADC_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002f18:	f000 f8da 	bl	80030d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f20:	2301      	movs	r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4805      	ldr	r0, [pc, #20]	; (8002f44 <MX_ADC1_Init+0x74>)
 8002f2e:	f7fd fb23 	bl	8000578 <HAL_ADC_ConfigChannel>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002f38:	f000 f8ca 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000118 	.word	0x20000118
 8002f48:	40012400 	.word	0x40012400

08002f4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f52:	f107 0308 	add.w	r3, r7, #8
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f60:	463b      	mov	r3, r7
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f68:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <MX_TIM1_Init+0x9c>)
 8002f6a:	4a20      	ldr	r2, [pc, #128]	; (8002fec <MX_TIM1_Init+0xa0>)
 8002f6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10799;//3599;
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <MX_TIM1_Init+0x9c>)
 8002f70:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002f74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <MX_TIM1_Init+0x9c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <MX_TIM1_Init+0x9c>)
 8002f7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f84:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <MX_TIM1_Init+0x9c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <MX_TIM1_Init+0x9c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <MX_TIM1_Init+0x9c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f96:	4814      	ldr	r0, [pc, #80]	; (8002fe8 <MX_TIM1_Init+0x9c>)
 8002f98:	f7fe fbc0 	bl	800171c <HAL_TIM_Base_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002fa2:	f000 f895 	bl	80030d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002faa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fac:	f107 0308 	add.w	r3, r7, #8
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <MX_TIM1_Init+0x9c>)
 8002fb4:	f7fe fcff 	bl	80019b6 <HAL_TIM_ConfigClockSource>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002fbe:	f000 f887 	bl	80030d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fca:	463b      	mov	r3, r7
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4806      	ldr	r0, [pc, #24]	; (8002fe8 <MX_TIM1_Init+0x9c>)
 8002fd0:	f7fe fefb 	bl	8001dca <HAL_TIMEx_MasterConfigSynchronization>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002fda:	f000 f879 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000148 	.word	0x20000148
 8002fec:	40012c00 	.word	0x40012c00

08002ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff6:	f107 0310 	add.w	r3, r7, #16
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003004:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <MX_GPIO_Init+0xd4>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	4a2e      	ldr	r2, [pc, #184]	; (80030c4 <MX_GPIO_Init+0xd4>)
 800300a:	f043 0310 	orr.w	r3, r3, #16
 800300e:	6193      	str	r3, [r2, #24]
 8003010:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <MX_GPIO_Init+0xd4>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800301c:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <MX_GPIO_Init+0xd4>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	4a28      	ldr	r2, [pc, #160]	; (80030c4 <MX_GPIO_Init+0xd4>)
 8003022:	f043 0320 	orr.w	r3, r3, #32
 8003026:	6193      	str	r3, [r2, #24]
 8003028:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <MX_GPIO_Init+0xd4>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <MX_GPIO_Init+0xd4>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4a22      	ldr	r2, [pc, #136]	; (80030c4 <MX_GPIO_Init+0xd4>)
 800303a:	f043 0304 	orr.w	r3, r3, #4
 800303e:	6193      	str	r3, [r2, #24]
 8003040:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <MX_GPIO_Init+0xd4>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800304c:	2200      	movs	r2, #0
 800304e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003052:	481d      	ldr	r0, [pc, #116]	; (80030c8 <MX_GPIO_Init+0xd8>)
 8003054:	f7fd fe93 	bl	8000d7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin 
 8003058:	2200      	movs	r2, #0
 800305a:	f240 21f6 	movw	r1, #758	; 0x2f6
 800305e:	481b      	ldr	r0, [pc, #108]	; (80030cc <MX_GPIO_Init+0xdc>)
 8003060:	f7fd fe8d 	bl	8000d7e <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|led1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003068:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306a:	2301      	movs	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003072:	2302      	movs	r3, #2
 8003074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003076:	f107 0310 	add.w	r3, r7, #16
 800307a:	4619      	mov	r1, r3
 800307c:	4812      	ldr	r0, [pc, #72]	; (80030c8 <MX_GPIO_Init+0xd8>)
 800307e:	f7fd fd09 	bl	8000a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_D4_Pin LCD_D5_Pin 
                           LCD_D6_Pin LCD_D7_Pin led1_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin 
 8003082:	f240 23f6 	movw	r3, #758	; 0x2f6
 8003086:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin|led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003088:	2301      	movs	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	2302      	movs	r3, #2
 8003092:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003094:	f107 0310 	add.w	r3, r7, #16
 8003098:	4619      	mov	r1, r3
 800309a:	480c      	ldr	r0, [pc, #48]	; (80030cc <MX_GPIO_Init+0xdc>)
 800309c:	f7fd fcfa 	bl	8000a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : enter_Pin up_Pin down_Pin */
  GPIO_InitStruct.Pin = enter_Pin|up_Pin|down_Pin;
 80030a0:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 80030a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030aa:	2302      	movs	r3, #2
 80030ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ae:	f107 0310 	add.w	r3, r7, #16
 80030b2:	4619      	mov	r1, r3
 80030b4:	4805      	ldr	r0, [pc, #20]	; (80030cc <MX_GPIO_Init+0xdc>)
 80030b6:	f7fd fced 	bl	8000a94 <HAL_GPIO_Init>

}
 80030ba:	bf00      	nop
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40011000 	.word	0x40011000
 80030cc:	40010800 	.word	0x40010800

080030d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_MspInit+0x5c>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	4a14      	ldr	r2, [pc, #80]	; (8003138 <HAL_MspInit+0x5c>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6193      	str	r3, [r2, #24]
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_MspInit+0x5c>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <HAL_MspInit+0x5c>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <HAL_MspInit+0x5c>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	61d3      	str	r3, [r2, #28]
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_MspInit+0x5c>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_MspInit+0x60>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_MspInit+0x60>)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	40021000 	.word	0x40021000
 800313c:	40010000 	.word	0x40010000

08003140 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 0310 	add.w	r3, r7, #16
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a14      	ldr	r2, [pc, #80]	; (80031ac <HAL_ADC_MspInit+0x6c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d121      	bne.n	80031a4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_ADC_MspInit+0x70>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <HAL_ADC_MspInit+0x70>)
 8003166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800316a:	6193      	str	r3, [r2, #24]
 800316c:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_ADC_MspInit+0x70>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003178:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <HAL_ADC_MspInit+0x70>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <HAL_ADC_MspInit+0x70>)
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	6193      	str	r3, [r2, #24]
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_ADC_MspInit+0x70>)
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003190:	2301      	movs	r3, #1
 8003192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003194:	2303      	movs	r3, #3
 8003196:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003198:	f107 0310 	add.w	r3, r7, #16
 800319c:	4619      	mov	r1, r3
 800319e:	4805      	ldr	r0, [pc, #20]	; (80031b4 <HAL_ADC_MspInit+0x74>)
 80031a0:	f7fd fc78 	bl	8000a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031a4:	bf00      	nop
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40012400 	.word	0x40012400
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40010800 	.word	0x40010800

080031b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <HAL_TIM_Base_MspInit+0x44>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d113      	bne.n	80031f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_TIM_Base_MspInit+0x48>)
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <HAL_TIM_Base_MspInit+0x48>)
 80031d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031d4:	6193      	str	r3, [r2, #24]
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_TIM_Base_MspInit+0x48>)
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	2019      	movs	r0, #25
 80031e8:	f7fd fc1d 	bl	8000a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031ec:	2019      	movs	r0, #25
 80031ee:	f7fd fc36 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40021000 	.word	0x40021000

08003204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003214:	e7fe      	b.n	8003214 <HardFault_Handler+0x4>

08003216 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800321a:	e7fe      	b.n	800321a <MemManage_Handler+0x4>

0800321c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <BusFault_Handler+0x4>

08003222 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003226:	e7fe      	b.n	8003226 <UsageFault_Handler+0x4>

08003228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003250:	f7fc ffc2 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}

08003258 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <TIM1_UP_IRQHandler+0x10>)
 800325e:	f7fe faa2 	bl	80017a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000148 	.word	0x20000148

0800326c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <_sbrk+0x50>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <_sbrk+0x16>
		heap_end = &end;
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <_sbrk+0x50>)
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <_sbrk+0x54>)
 8003280:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <_sbrk+0x50>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <_sbrk+0x50>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4413      	add	r3, r2
 8003290:	466a      	mov	r2, sp
 8003292:	4293      	cmp	r3, r2
 8003294:	d907      	bls.n	80032a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003296:	f000 f86f 	bl	8003378 <__errno>
 800329a:	4602      	mov	r2, r0
 800329c:	230c      	movs	r3, #12
 800329e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80032a0:	f04f 33ff 	mov.w	r3, #4294967295
 80032a4:	e006      	b.n	80032b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <_sbrk+0x50>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	4a03      	ldr	r2, [pc, #12]	; (80032bc <_sbrk+0x50>)
 80032b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80032b2:	68fb      	ldr	r3, [r7, #12]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	200000fc 	.word	0x200000fc
 80032c0:	20000190 	.word	0x20000190

080032c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <SystemInit+0x5c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <SystemInit+0x5c>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <SystemInit+0x5c>)
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	4911      	ldr	r1, [pc, #68]	; (8003320 <SystemInit+0x5c>)
 80032da:	4b12      	ldr	r3, [pc, #72]	; (8003324 <SystemInit+0x60>)
 80032dc:	4013      	ands	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <SystemInit+0x5c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <SystemInit+0x5c>)
 80032e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <SystemInit+0x5c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <SystemInit+0x5c>)
 80032f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <SystemInit+0x5c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4a07      	ldr	r2, [pc, #28]	; (8003320 <SystemInit+0x5c>)
 8003302:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003306:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <SystemInit+0x5c>)
 800330a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800330e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <SystemInit+0x64>)
 8003312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003316:	609a      	str	r2, [r3, #8]
#endif 
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40021000 	.word	0x40021000
 8003324:	f8ff0000 	.word	0xf8ff0000
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800332c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800332e:	e003      	b.n	8003338 <LoopCopyDataInit>

08003330 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003332:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003334:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003336:	3104      	adds	r1, #4

08003338 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003338:	480a      	ldr	r0, [pc, #40]	; (8003364 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800333c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800333e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003340:	d3f6      	bcc.n	8003330 <CopyDataInit>
  ldr r2, =_sbss
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003344:	e002      	b.n	800334c <LoopFillZerobss>

08003346 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003346:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003348:	f842 3b04 	str.w	r3, [r2], #4

0800334c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800334e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003350:	d3f9      	bcc.n	8003346 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003352:	f7ff ffb7 	bl	80032c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003356:	f000 f815 	bl	8003384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800335a:	f7fe ff61 	bl	8002220 <main>
  bx lr
 800335e:	4770      	bx	lr
  ldr r3, =_sidata
 8003360:	08003e8c 	.word	0x08003e8c
  ldr r0, =_sdata
 8003364:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003368:	200000d0 	.word	0x200000d0
  ldr r2, =_sbss
 800336c:	200000d0 	.word	0x200000d0
  ldr r3, = _ebss
 8003370:	2000018c 	.word	0x2000018c

08003374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003374:	e7fe      	b.n	8003374 <ADC1_2_IRQHandler>
	...

08003378 <__errno>:
 8003378:	4b01      	ldr	r3, [pc, #4]	; (8003380 <__errno+0x8>)
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	2000006c 	.word	0x2000006c

08003384 <__libc_init_array>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	2500      	movs	r5, #0
 8003388:	4e0c      	ldr	r6, [pc, #48]	; (80033bc <__libc_init_array+0x38>)
 800338a:	4c0d      	ldr	r4, [pc, #52]	; (80033c0 <__libc_init_array+0x3c>)
 800338c:	1ba4      	subs	r4, r4, r6
 800338e:	10a4      	asrs	r4, r4, #2
 8003390:	42a5      	cmp	r5, r4
 8003392:	d109      	bne.n	80033a8 <__libc_init_array+0x24>
 8003394:	f000 fc34 	bl	8003c00 <_init>
 8003398:	2500      	movs	r5, #0
 800339a:	4e0a      	ldr	r6, [pc, #40]	; (80033c4 <__libc_init_array+0x40>)
 800339c:	4c0a      	ldr	r4, [pc, #40]	; (80033c8 <__libc_init_array+0x44>)
 800339e:	1ba4      	subs	r4, r4, r6
 80033a0:	10a4      	asrs	r4, r4, #2
 80033a2:	42a5      	cmp	r5, r4
 80033a4:	d105      	bne.n	80033b2 <__libc_init_array+0x2e>
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
 80033a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ac:	4798      	blx	r3
 80033ae:	3501      	adds	r5, #1
 80033b0:	e7ee      	b.n	8003390 <__libc_init_array+0xc>
 80033b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033b6:	4798      	blx	r3
 80033b8:	3501      	adds	r5, #1
 80033ba:	e7f2      	b.n	80033a2 <__libc_init_array+0x1e>
 80033bc:	08003e84 	.word	0x08003e84
 80033c0:	08003e84 	.word	0x08003e84
 80033c4:	08003e84 	.word	0x08003e84
 80033c8:	08003e88 	.word	0x08003e88

080033cc <memset>:
 80033cc:	4603      	mov	r3, r0
 80033ce:	4402      	add	r2, r0
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d100      	bne.n	80033d6 <memset+0xa>
 80033d4:	4770      	bx	lr
 80033d6:	f803 1b01 	strb.w	r1, [r3], #1
 80033da:	e7f9      	b.n	80033d0 <memset+0x4>

080033dc <siprintf>:
 80033dc:	b40e      	push	{r1, r2, r3}
 80033de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033e2:	b500      	push	{lr}
 80033e4:	b09c      	sub	sp, #112	; 0x70
 80033e6:	ab1d      	add	r3, sp, #116	; 0x74
 80033e8:	9002      	str	r0, [sp, #8]
 80033ea:	9006      	str	r0, [sp, #24]
 80033ec:	9107      	str	r1, [sp, #28]
 80033ee:	9104      	str	r1, [sp, #16]
 80033f0:	4808      	ldr	r0, [pc, #32]	; (8003414 <siprintf+0x38>)
 80033f2:	4909      	ldr	r1, [pc, #36]	; (8003418 <siprintf+0x3c>)
 80033f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033f8:	9105      	str	r1, [sp, #20]
 80033fa:	6800      	ldr	r0, [r0, #0]
 80033fc:	a902      	add	r1, sp, #8
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	f000 f866 	bl	80034d0 <_svfiprintf_r>
 8003404:	2200      	movs	r2, #0
 8003406:	9b02      	ldr	r3, [sp, #8]
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	b01c      	add	sp, #112	; 0x70
 800340c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003410:	b003      	add	sp, #12
 8003412:	4770      	bx	lr
 8003414:	2000006c 	.word	0x2000006c
 8003418:	ffff0208 	.word	0xffff0208

0800341c <__ssputs_r>:
 800341c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003420:	688e      	ldr	r6, [r1, #8]
 8003422:	4682      	mov	sl, r0
 8003424:	429e      	cmp	r6, r3
 8003426:	460c      	mov	r4, r1
 8003428:	4690      	mov	r8, r2
 800342a:	4699      	mov	r9, r3
 800342c:	d837      	bhi.n	800349e <__ssputs_r+0x82>
 800342e:	898a      	ldrh	r2, [r1, #12]
 8003430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003434:	d031      	beq.n	800349a <__ssputs_r+0x7e>
 8003436:	2302      	movs	r3, #2
 8003438:	6825      	ldr	r5, [r4, #0]
 800343a:	6909      	ldr	r1, [r1, #16]
 800343c:	1a6f      	subs	r7, r5, r1
 800343e:	6965      	ldr	r5, [r4, #20]
 8003440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003444:	fb95 f5f3 	sdiv	r5, r5, r3
 8003448:	f109 0301 	add.w	r3, r9, #1
 800344c:	443b      	add	r3, r7
 800344e:	429d      	cmp	r5, r3
 8003450:	bf38      	it	cc
 8003452:	461d      	movcc	r5, r3
 8003454:	0553      	lsls	r3, r2, #21
 8003456:	d530      	bpl.n	80034ba <__ssputs_r+0x9e>
 8003458:	4629      	mov	r1, r5
 800345a:	f000 fb37 	bl	8003acc <_malloc_r>
 800345e:	4606      	mov	r6, r0
 8003460:	b950      	cbnz	r0, 8003478 <__ssputs_r+0x5c>
 8003462:	230c      	movs	r3, #12
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	f8ca 3000 	str.w	r3, [sl]
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003472:	81a3      	strh	r3, [r4, #12]
 8003474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003478:	463a      	mov	r2, r7
 800347a:	6921      	ldr	r1, [r4, #16]
 800347c:	f000 fab6 	bl	80039ec <memcpy>
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348a:	81a3      	strh	r3, [r4, #12]
 800348c:	6126      	str	r6, [r4, #16]
 800348e:	443e      	add	r6, r7
 8003490:	6026      	str	r6, [r4, #0]
 8003492:	464e      	mov	r6, r9
 8003494:	6165      	str	r5, [r4, #20]
 8003496:	1bed      	subs	r5, r5, r7
 8003498:	60a5      	str	r5, [r4, #8]
 800349a:	454e      	cmp	r6, r9
 800349c:	d900      	bls.n	80034a0 <__ssputs_r+0x84>
 800349e:	464e      	mov	r6, r9
 80034a0:	4632      	mov	r2, r6
 80034a2:	4641      	mov	r1, r8
 80034a4:	6820      	ldr	r0, [r4, #0]
 80034a6:	f000 faac 	bl	8003a02 <memmove>
 80034aa:	68a3      	ldr	r3, [r4, #8]
 80034ac:	2000      	movs	r0, #0
 80034ae:	1b9b      	subs	r3, r3, r6
 80034b0:	60a3      	str	r3, [r4, #8]
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	441e      	add	r6, r3
 80034b6:	6026      	str	r6, [r4, #0]
 80034b8:	e7dc      	b.n	8003474 <__ssputs_r+0x58>
 80034ba:	462a      	mov	r2, r5
 80034bc:	f000 fb60 	bl	8003b80 <_realloc_r>
 80034c0:	4606      	mov	r6, r0
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d1e2      	bne.n	800348c <__ssputs_r+0x70>
 80034c6:	6921      	ldr	r1, [r4, #16]
 80034c8:	4650      	mov	r0, sl
 80034ca:	f000 fab3 	bl	8003a34 <_free_r>
 80034ce:	e7c8      	b.n	8003462 <__ssputs_r+0x46>

080034d0 <_svfiprintf_r>:
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	461d      	mov	r5, r3
 80034d6:	898b      	ldrh	r3, [r1, #12]
 80034d8:	b09d      	sub	sp, #116	; 0x74
 80034da:	061f      	lsls	r7, r3, #24
 80034dc:	4680      	mov	r8, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	4616      	mov	r6, r2
 80034e2:	d50f      	bpl.n	8003504 <_svfiprintf_r+0x34>
 80034e4:	690b      	ldr	r3, [r1, #16]
 80034e6:	b96b      	cbnz	r3, 8003504 <_svfiprintf_r+0x34>
 80034e8:	2140      	movs	r1, #64	; 0x40
 80034ea:	f000 faef 	bl	8003acc <_malloc_r>
 80034ee:	6020      	str	r0, [r4, #0]
 80034f0:	6120      	str	r0, [r4, #16]
 80034f2:	b928      	cbnz	r0, 8003500 <_svfiprintf_r+0x30>
 80034f4:	230c      	movs	r3, #12
 80034f6:	f8c8 3000 	str.w	r3, [r8]
 80034fa:	f04f 30ff 	mov.w	r0, #4294967295
 80034fe:	e0c8      	b.n	8003692 <_svfiprintf_r+0x1c2>
 8003500:	2340      	movs	r3, #64	; 0x40
 8003502:	6163      	str	r3, [r4, #20]
 8003504:	2300      	movs	r3, #0
 8003506:	9309      	str	r3, [sp, #36]	; 0x24
 8003508:	2320      	movs	r3, #32
 800350a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800350e:	2330      	movs	r3, #48	; 0x30
 8003510:	f04f 0b01 	mov.w	fp, #1
 8003514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003518:	9503      	str	r5, [sp, #12]
 800351a:	4637      	mov	r7, r6
 800351c:	463d      	mov	r5, r7
 800351e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003522:	b10b      	cbz	r3, 8003528 <_svfiprintf_r+0x58>
 8003524:	2b25      	cmp	r3, #37	; 0x25
 8003526:	d13e      	bne.n	80035a6 <_svfiprintf_r+0xd6>
 8003528:	ebb7 0a06 	subs.w	sl, r7, r6
 800352c:	d00b      	beq.n	8003546 <_svfiprintf_r+0x76>
 800352e:	4653      	mov	r3, sl
 8003530:	4632      	mov	r2, r6
 8003532:	4621      	mov	r1, r4
 8003534:	4640      	mov	r0, r8
 8003536:	f7ff ff71 	bl	800341c <__ssputs_r>
 800353a:	3001      	adds	r0, #1
 800353c:	f000 80a4 	beq.w	8003688 <_svfiprintf_r+0x1b8>
 8003540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003542:	4453      	add	r3, sl
 8003544:	9309      	str	r3, [sp, #36]	; 0x24
 8003546:	783b      	ldrb	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 809d 	beq.w	8003688 <_svfiprintf_r+0x1b8>
 800354e:	2300      	movs	r3, #0
 8003550:	f04f 32ff 	mov.w	r2, #4294967295
 8003554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003558:	9304      	str	r3, [sp, #16]
 800355a:	9307      	str	r3, [sp, #28]
 800355c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003560:	931a      	str	r3, [sp, #104]	; 0x68
 8003562:	462f      	mov	r7, r5
 8003564:	2205      	movs	r2, #5
 8003566:	f817 1b01 	ldrb.w	r1, [r7], #1
 800356a:	4850      	ldr	r0, [pc, #320]	; (80036ac <_svfiprintf_r+0x1dc>)
 800356c:	f000 fa30 	bl	80039d0 <memchr>
 8003570:	9b04      	ldr	r3, [sp, #16]
 8003572:	b9d0      	cbnz	r0, 80035aa <_svfiprintf_r+0xda>
 8003574:	06d9      	lsls	r1, r3, #27
 8003576:	bf44      	itt	mi
 8003578:	2220      	movmi	r2, #32
 800357a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800357e:	071a      	lsls	r2, r3, #28
 8003580:	bf44      	itt	mi
 8003582:	222b      	movmi	r2, #43	; 0x2b
 8003584:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003588:	782a      	ldrb	r2, [r5, #0]
 800358a:	2a2a      	cmp	r2, #42	; 0x2a
 800358c:	d015      	beq.n	80035ba <_svfiprintf_r+0xea>
 800358e:	462f      	mov	r7, r5
 8003590:	2000      	movs	r0, #0
 8003592:	250a      	movs	r5, #10
 8003594:	9a07      	ldr	r2, [sp, #28]
 8003596:	4639      	mov	r1, r7
 8003598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800359c:	3b30      	subs	r3, #48	; 0x30
 800359e:	2b09      	cmp	r3, #9
 80035a0:	d94d      	bls.n	800363e <_svfiprintf_r+0x16e>
 80035a2:	b1b8      	cbz	r0, 80035d4 <_svfiprintf_r+0x104>
 80035a4:	e00f      	b.n	80035c6 <_svfiprintf_r+0xf6>
 80035a6:	462f      	mov	r7, r5
 80035a8:	e7b8      	b.n	800351c <_svfiprintf_r+0x4c>
 80035aa:	4a40      	ldr	r2, [pc, #256]	; (80036ac <_svfiprintf_r+0x1dc>)
 80035ac:	463d      	mov	r5, r7
 80035ae:	1a80      	subs	r0, r0, r2
 80035b0:	fa0b f000 	lsl.w	r0, fp, r0
 80035b4:	4318      	orrs	r0, r3
 80035b6:	9004      	str	r0, [sp, #16]
 80035b8:	e7d3      	b.n	8003562 <_svfiprintf_r+0x92>
 80035ba:	9a03      	ldr	r2, [sp, #12]
 80035bc:	1d11      	adds	r1, r2, #4
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	9103      	str	r1, [sp, #12]
 80035c2:	2a00      	cmp	r2, #0
 80035c4:	db01      	blt.n	80035ca <_svfiprintf_r+0xfa>
 80035c6:	9207      	str	r2, [sp, #28]
 80035c8:	e004      	b.n	80035d4 <_svfiprintf_r+0x104>
 80035ca:	4252      	negs	r2, r2
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	9207      	str	r2, [sp, #28]
 80035d2:	9304      	str	r3, [sp, #16]
 80035d4:	783b      	ldrb	r3, [r7, #0]
 80035d6:	2b2e      	cmp	r3, #46	; 0x2e
 80035d8:	d10c      	bne.n	80035f4 <_svfiprintf_r+0x124>
 80035da:	787b      	ldrb	r3, [r7, #1]
 80035dc:	2b2a      	cmp	r3, #42	; 0x2a
 80035de:	d133      	bne.n	8003648 <_svfiprintf_r+0x178>
 80035e0:	9b03      	ldr	r3, [sp, #12]
 80035e2:	3702      	adds	r7, #2
 80035e4:	1d1a      	adds	r2, r3, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	9203      	str	r2, [sp, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bfb8      	it	lt
 80035ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80035f2:	9305      	str	r3, [sp, #20]
 80035f4:	4d2e      	ldr	r5, [pc, #184]	; (80036b0 <_svfiprintf_r+0x1e0>)
 80035f6:	2203      	movs	r2, #3
 80035f8:	7839      	ldrb	r1, [r7, #0]
 80035fa:	4628      	mov	r0, r5
 80035fc:	f000 f9e8 	bl	80039d0 <memchr>
 8003600:	b138      	cbz	r0, 8003612 <_svfiprintf_r+0x142>
 8003602:	2340      	movs	r3, #64	; 0x40
 8003604:	1b40      	subs	r0, r0, r5
 8003606:	fa03 f000 	lsl.w	r0, r3, r0
 800360a:	9b04      	ldr	r3, [sp, #16]
 800360c:	3701      	adds	r7, #1
 800360e:	4303      	orrs	r3, r0
 8003610:	9304      	str	r3, [sp, #16]
 8003612:	7839      	ldrb	r1, [r7, #0]
 8003614:	2206      	movs	r2, #6
 8003616:	4827      	ldr	r0, [pc, #156]	; (80036b4 <_svfiprintf_r+0x1e4>)
 8003618:	1c7e      	adds	r6, r7, #1
 800361a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800361e:	f000 f9d7 	bl	80039d0 <memchr>
 8003622:	2800      	cmp	r0, #0
 8003624:	d038      	beq.n	8003698 <_svfiprintf_r+0x1c8>
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <_svfiprintf_r+0x1e8>)
 8003628:	bb13      	cbnz	r3, 8003670 <_svfiprintf_r+0x1a0>
 800362a:	9b03      	ldr	r3, [sp, #12]
 800362c:	3307      	adds	r3, #7
 800362e:	f023 0307 	bic.w	r3, r3, #7
 8003632:	3308      	adds	r3, #8
 8003634:	9303      	str	r3, [sp, #12]
 8003636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003638:	444b      	add	r3, r9
 800363a:	9309      	str	r3, [sp, #36]	; 0x24
 800363c:	e76d      	b.n	800351a <_svfiprintf_r+0x4a>
 800363e:	fb05 3202 	mla	r2, r5, r2, r3
 8003642:	2001      	movs	r0, #1
 8003644:	460f      	mov	r7, r1
 8003646:	e7a6      	b.n	8003596 <_svfiprintf_r+0xc6>
 8003648:	2300      	movs	r3, #0
 800364a:	250a      	movs	r5, #10
 800364c:	4619      	mov	r1, r3
 800364e:	3701      	adds	r7, #1
 8003650:	9305      	str	r3, [sp, #20]
 8003652:	4638      	mov	r0, r7
 8003654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003658:	3a30      	subs	r2, #48	; 0x30
 800365a:	2a09      	cmp	r2, #9
 800365c:	d903      	bls.n	8003666 <_svfiprintf_r+0x196>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0c8      	beq.n	80035f4 <_svfiprintf_r+0x124>
 8003662:	9105      	str	r1, [sp, #20]
 8003664:	e7c6      	b.n	80035f4 <_svfiprintf_r+0x124>
 8003666:	fb05 2101 	mla	r1, r5, r1, r2
 800366a:	2301      	movs	r3, #1
 800366c:	4607      	mov	r7, r0
 800366e:	e7f0      	b.n	8003652 <_svfiprintf_r+0x182>
 8003670:	ab03      	add	r3, sp, #12
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	4622      	mov	r2, r4
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <_svfiprintf_r+0x1ec>)
 8003678:	a904      	add	r1, sp, #16
 800367a:	4640      	mov	r0, r8
 800367c:	f3af 8000 	nop.w
 8003680:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003684:	4681      	mov	r9, r0
 8003686:	d1d6      	bne.n	8003636 <_svfiprintf_r+0x166>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	065b      	lsls	r3, r3, #25
 800368c:	f53f af35 	bmi.w	80034fa <_svfiprintf_r+0x2a>
 8003690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003692:	b01d      	add	sp, #116	; 0x74
 8003694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003698:	ab03      	add	r3, sp, #12
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4622      	mov	r2, r4
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <_svfiprintf_r+0x1ec>)
 80036a0:	a904      	add	r1, sp, #16
 80036a2:	4640      	mov	r0, r8
 80036a4:	f000 f882 	bl	80037ac <_printf_i>
 80036a8:	e7ea      	b.n	8003680 <_svfiprintf_r+0x1b0>
 80036aa:	bf00      	nop
 80036ac:	08003e50 	.word	0x08003e50
 80036b0:	08003e56 	.word	0x08003e56
 80036b4:	08003e5a 	.word	0x08003e5a
 80036b8:	00000000 	.word	0x00000000
 80036bc:	0800341d 	.word	0x0800341d

080036c0 <_printf_common>:
 80036c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c4:	4691      	mov	r9, r2
 80036c6:	461f      	mov	r7, r3
 80036c8:	688a      	ldr	r2, [r1, #8]
 80036ca:	690b      	ldr	r3, [r1, #16]
 80036cc:	4606      	mov	r6, r0
 80036ce:	4293      	cmp	r3, r2
 80036d0:	bfb8      	it	lt
 80036d2:	4613      	movlt	r3, r2
 80036d4:	f8c9 3000 	str.w	r3, [r9]
 80036d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036dc:	460c      	mov	r4, r1
 80036de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036e2:	b112      	cbz	r2, 80036ea <_printf_common+0x2a>
 80036e4:	3301      	adds	r3, #1
 80036e6:	f8c9 3000 	str.w	r3, [r9]
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	0699      	lsls	r1, r3, #26
 80036ee:	bf42      	ittt	mi
 80036f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036f4:	3302      	addmi	r3, #2
 80036f6:	f8c9 3000 	strmi.w	r3, [r9]
 80036fa:	6825      	ldr	r5, [r4, #0]
 80036fc:	f015 0506 	ands.w	r5, r5, #6
 8003700:	d107      	bne.n	8003712 <_printf_common+0x52>
 8003702:	f104 0a19 	add.w	sl, r4, #25
 8003706:	68e3      	ldr	r3, [r4, #12]
 8003708:	f8d9 2000 	ldr.w	r2, [r9]
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	42ab      	cmp	r3, r5
 8003710:	dc29      	bgt.n	8003766 <_printf_common+0xa6>
 8003712:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003716:	6822      	ldr	r2, [r4, #0]
 8003718:	3300      	adds	r3, #0
 800371a:	bf18      	it	ne
 800371c:	2301      	movne	r3, #1
 800371e:	0692      	lsls	r2, r2, #26
 8003720:	d42e      	bmi.n	8003780 <_printf_common+0xc0>
 8003722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003726:	4639      	mov	r1, r7
 8003728:	4630      	mov	r0, r6
 800372a:	47c0      	blx	r8
 800372c:	3001      	adds	r0, #1
 800372e:	d021      	beq.n	8003774 <_printf_common+0xb4>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	68e5      	ldr	r5, [r4, #12]
 8003734:	f003 0306 	and.w	r3, r3, #6
 8003738:	2b04      	cmp	r3, #4
 800373a:	bf18      	it	ne
 800373c:	2500      	movne	r5, #0
 800373e:	f8d9 2000 	ldr.w	r2, [r9]
 8003742:	f04f 0900 	mov.w	r9, #0
 8003746:	bf08      	it	eq
 8003748:	1aad      	subeq	r5, r5, r2
 800374a:	68a3      	ldr	r3, [r4, #8]
 800374c:	6922      	ldr	r2, [r4, #16]
 800374e:	bf08      	it	eq
 8003750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003754:	4293      	cmp	r3, r2
 8003756:	bfc4      	itt	gt
 8003758:	1a9b      	subgt	r3, r3, r2
 800375a:	18ed      	addgt	r5, r5, r3
 800375c:	341a      	adds	r4, #26
 800375e:	454d      	cmp	r5, r9
 8003760:	d11a      	bne.n	8003798 <_printf_common+0xd8>
 8003762:	2000      	movs	r0, #0
 8003764:	e008      	b.n	8003778 <_printf_common+0xb8>
 8003766:	2301      	movs	r3, #1
 8003768:	4652      	mov	r2, sl
 800376a:	4639      	mov	r1, r7
 800376c:	4630      	mov	r0, r6
 800376e:	47c0      	blx	r8
 8003770:	3001      	adds	r0, #1
 8003772:	d103      	bne.n	800377c <_printf_common+0xbc>
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377c:	3501      	adds	r5, #1
 800377e:	e7c2      	b.n	8003706 <_printf_common+0x46>
 8003780:	2030      	movs	r0, #48	; 0x30
 8003782:	18e1      	adds	r1, r4, r3
 8003784:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800378e:	4422      	add	r2, r4
 8003790:	3302      	adds	r3, #2
 8003792:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003796:	e7c4      	b.n	8003722 <_printf_common+0x62>
 8003798:	2301      	movs	r3, #1
 800379a:	4622      	mov	r2, r4
 800379c:	4639      	mov	r1, r7
 800379e:	4630      	mov	r0, r6
 80037a0:	47c0      	blx	r8
 80037a2:	3001      	adds	r0, #1
 80037a4:	d0e6      	beq.n	8003774 <_printf_common+0xb4>
 80037a6:	f109 0901 	add.w	r9, r9, #1
 80037aa:	e7d8      	b.n	800375e <_printf_common+0x9e>

080037ac <_printf_i>:
 80037ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037b4:	460c      	mov	r4, r1
 80037b6:	7e09      	ldrb	r1, [r1, #24]
 80037b8:	b085      	sub	sp, #20
 80037ba:	296e      	cmp	r1, #110	; 0x6e
 80037bc:	4617      	mov	r7, r2
 80037be:	4606      	mov	r6, r0
 80037c0:	4698      	mov	r8, r3
 80037c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037c4:	f000 80b3 	beq.w	800392e <_printf_i+0x182>
 80037c8:	d822      	bhi.n	8003810 <_printf_i+0x64>
 80037ca:	2963      	cmp	r1, #99	; 0x63
 80037cc:	d036      	beq.n	800383c <_printf_i+0x90>
 80037ce:	d80a      	bhi.n	80037e6 <_printf_i+0x3a>
 80037d0:	2900      	cmp	r1, #0
 80037d2:	f000 80b9 	beq.w	8003948 <_printf_i+0x19c>
 80037d6:	2958      	cmp	r1, #88	; 0x58
 80037d8:	f000 8083 	beq.w	80038e2 <_printf_i+0x136>
 80037dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037e4:	e032      	b.n	800384c <_printf_i+0xa0>
 80037e6:	2964      	cmp	r1, #100	; 0x64
 80037e8:	d001      	beq.n	80037ee <_printf_i+0x42>
 80037ea:	2969      	cmp	r1, #105	; 0x69
 80037ec:	d1f6      	bne.n	80037dc <_printf_i+0x30>
 80037ee:	6820      	ldr	r0, [r4, #0]
 80037f0:	6813      	ldr	r3, [r2, #0]
 80037f2:	0605      	lsls	r5, r0, #24
 80037f4:	f103 0104 	add.w	r1, r3, #4
 80037f8:	d52a      	bpl.n	8003850 <_printf_i+0xa4>
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6011      	str	r1, [r2, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da03      	bge.n	800380a <_printf_i+0x5e>
 8003802:	222d      	movs	r2, #45	; 0x2d
 8003804:	425b      	negs	r3, r3
 8003806:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800380a:	486f      	ldr	r0, [pc, #444]	; (80039c8 <_printf_i+0x21c>)
 800380c:	220a      	movs	r2, #10
 800380e:	e039      	b.n	8003884 <_printf_i+0xd8>
 8003810:	2973      	cmp	r1, #115	; 0x73
 8003812:	f000 809d 	beq.w	8003950 <_printf_i+0x1a4>
 8003816:	d808      	bhi.n	800382a <_printf_i+0x7e>
 8003818:	296f      	cmp	r1, #111	; 0x6f
 800381a:	d020      	beq.n	800385e <_printf_i+0xb2>
 800381c:	2970      	cmp	r1, #112	; 0x70
 800381e:	d1dd      	bne.n	80037dc <_printf_i+0x30>
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	f043 0320 	orr.w	r3, r3, #32
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	e003      	b.n	8003832 <_printf_i+0x86>
 800382a:	2975      	cmp	r1, #117	; 0x75
 800382c:	d017      	beq.n	800385e <_printf_i+0xb2>
 800382e:	2978      	cmp	r1, #120	; 0x78
 8003830:	d1d4      	bne.n	80037dc <_printf_i+0x30>
 8003832:	2378      	movs	r3, #120	; 0x78
 8003834:	4865      	ldr	r0, [pc, #404]	; (80039cc <_printf_i+0x220>)
 8003836:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800383a:	e055      	b.n	80038e8 <_printf_i+0x13c>
 800383c:	6813      	ldr	r3, [r2, #0]
 800383e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003842:	1d19      	adds	r1, r3, #4
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6011      	str	r1, [r2, #0]
 8003848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800384c:	2301      	movs	r3, #1
 800384e:	e08c      	b.n	800396a <_printf_i+0x1be>
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003856:	6011      	str	r1, [r2, #0]
 8003858:	bf18      	it	ne
 800385a:	b21b      	sxthne	r3, r3
 800385c:	e7cf      	b.n	80037fe <_printf_i+0x52>
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	6825      	ldr	r5, [r4, #0]
 8003862:	1d18      	adds	r0, r3, #4
 8003864:	6010      	str	r0, [r2, #0]
 8003866:	0628      	lsls	r0, r5, #24
 8003868:	d501      	bpl.n	800386e <_printf_i+0xc2>
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	e002      	b.n	8003874 <_printf_i+0xc8>
 800386e:	0668      	lsls	r0, r5, #25
 8003870:	d5fb      	bpl.n	800386a <_printf_i+0xbe>
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	296f      	cmp	r1, #111	; 0x6f
 8003876:	bf14      	ite	ne
 8003878:	220a      	movne	r2, #10
 800387a:	2208      	moveq	r2, #8
 800387c:	4852      	ldr	r0, [pc, #328]	; (80039c8 <_printf_i+0x21c>)
 800387e:	2100      	movs	r1, #0
 8003880:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003884:	6865      	ldr	r5, [r4, #4]
 8003886:	2d00      	cmp	r5, #0
 8003888:	60a5      	str	r5, [r4, #8]
 800388a:	f2c0 8095 	blt.w	80039b8 <_printf_i+0x20c>
 800388e:	6821      	ldr	r1, [r4, #0]
 8003890:	f021 0104 	bic.w	r1, r1, #4
 8003894:	6021      	str	r1, [r4, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d13d      	bne.n	8003916 <_printf_i+0x16a>
 800389a:	2d00      	cmp	r5, #0
 800389c:	f040 808e 	bne.w	80039bc <_printf_i+0x210>
 80038a0:	4665      	mov	r5, ip
 80038a2:	2a08      	cmp	r2, #8
 80038a4:	d10b      	bne.n	80038be <_printf_i+0x112>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	07db      	lsls	r3, r3, #31
 80038aa:	d508      	bpl.n	80038be <_printf_i+0x112>
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	6862      	ldr	r2, [r4, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	bfde      	ittt	le
 80038b4:	2330      	movle	r3, #48	; 0x30
 80038b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038be:	ebac 0305 	sub.w	r3, ip, r5
 80038c2:	6123      	str	r3, [r4, #16]
 80038c4:	f8cd 8000 	str.w	r8, [sp]
 80038c8:	463b      	mov	r3, r7
 80038ca:	aa03      	add	r2, sp, #12
 80038cc:	4621      	mov	r1, r4
 80038ce:	4630      	mov	r0, r6
 80038d0:	f7ff fef6 	bl	80036c0 <_printf_common>
 80038d4:	3001      	adds	r0, #1
 80038d6:	d14d      	bne.n	8003974 <_printf_i+0x1c8>
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	b005      	add	sp, #20
 80038de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038e2:	4839      	ldr	r0, [pc, #228]	; (80039c8 <_printf_i+0x21c>)
 80038e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038e8:	6813      	ldr	r3, [r2, #0]
 80038ea:	6821      	ldr	r1, [r4, #0]
 80038ec:	1d1d      	adds	r5, r3, #4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6015      	str	r5, [r2, #0]
 80038f2:	060a      	lsls	r2, r1, #24
 80038f4:	d50b      	bpl.n	800390e <_printf_i+0x162>
 80038f6:	07ca      	lsls	r2, r1, #31
 80038f8:	bf44      	itt	mi
 80038fa:	f041 0120 	orrmi.w	r1, r1, #32
 80038fe:	6021      	strmi	r1, [r4, #0]
 8003900:	b91b      	cbnz	r3, 800390a <_printf_i+0x15e>
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	f022 0220 	bic.w	r2, r2, #32
 8003908:	6022      	str	r2, [r4, #0]
 800390a:	2210      	movs	r2, #16
 800390c:	e7b7      	b.n	800387e <_printf_i+0xd2>
 800390e:	064d      	lsls	r5, r1, #25
 8003910:	bf48      	it	mi
 8003912:	b29b      	uxthmi	r3, r3
 8003914:	e7ef      	b.n	80038f6 <_printf_i+0x14a>
 8003916:	4665      	mov	r5, ip
 8003918:	fbb3 f1f2 	udiv	r1, r3, r2
 800391c:	fb02 3311 	mls	r3, r2, r1, r3
 8003920:	5cc3      	ldrb	r3, [r0, r3]
 8003922:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003926:	460b      	mov	r3, r1
 8003928:	2900      	cmp	r1, #0
 800392a:	d1f5      	bne.n	8003918 <_printf_i+0x16c>
 800392c:	e7b9      	b.n	80038a2 <_printf_i+0xf6>
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	6825      	ldr	r5, [r4, #0]
 8003932:	1d18      	adds	r0, r3, #4
 8003934:	6961      	ldr	r1, [r4, #20]
 8003936:	6010      	str	r0, [r2, #0]
 8003938:	0628      	lsls	r0, r5, #24
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	d501      	bpl.n	8003942 <_printf_i+0x196>
 800393e:	6019      	str	r1, [r3, #0]
 8003940:	e002      	b.n	8003948 <_printf_i+0x19c>
 8003942:	066a      	lsls	r2, r5, #25
 8003944:	d5fb      	bpl.n	800393e <_printf_i+0x192>
 8003946:	8019      	strh	r1, [r3, #0]
 8003948:	2300      	movs	r3, #0
 800394a:	4665      	mov	r5, ip
 800394c:	6123      	str	r3, [r4, #16]
 800394e:	e7b9      	b.n	80038c4 <_printf_i+0x118>
 8003950:	6813      	ldr	r3, [r2, #0]
 8003952:	1d19      	adds	r1, r3, #4
 8003954:	6011      	str	r1, [r2, #0]
 8003956:	681d      	ldr	r5, [r3, #0]
 8003958:	6862      	ldr	r2, [r4, #4]
 800395a:	2100      	movs	r1, #0
 800395c:	4628      	mov	r0, r5
 800395e:	f000 f837 	bl	80039d0 <memchr>
 8003962:	b108      	cbz	r0, 8003968 <_printf_i+0x1bc>
 8003964:	1b40      	subs	r0, r0, r5
 8003966:	6060      	str	r0, [r4, #4]
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	6123      	str	r3, [r4, #16]
 800396c:	2300      	movs	r3, #0
 800396e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003972:	e7a7      	b.n	80038c4 <_printf_i+0x118>
 8003974:	6923      	ldr	r3, [r4, #16]
 8003976:	462a      	mov	r2, r5
 8003978:	4639      	mov	r1, r7
 800397a:	4630      	mov	r0, r6
 800397c:	47c0      	blx	r8
 800397e:	3001      	adds	r0, #1
 8003980:	d0aa      	beq.n	80038d8 <_printf_i+0x12c>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	079b      	lsls	r3, r3, #30
 8003986:	d413      	bmi.n	80039b0 <_printf_i+0x204>
 8003988:	68e0      	ldr	r0, [r4, #12]
 800398a:	9b03      	ldr	r3, [sp, #12]
 800398c:	4298      	cmp	r0, r3
 800398e:	bfb8      	it	lt
 8003990:	4618      	movlt	r0, r3
 8003992:	e7a3      	b.n	80038dc <_printf_i+0x130>
 8003994:	2301      	movs	r3, #1
 8003996:	464a      	mov	r2, r9
 8003998:	4639      	mov	r1, r7
 800399a:	4630      	mov	r0, r6
 800399c:	47c0      	blx	r8
 800399e:	3001      	adds	r0, #1
 80039a0:	d09a      	beq.n	80038d8 <_printf_i+0x12c>
 80039a2:	3501      	adds	r5, #1
 80039a4:	68e3      	ldr	r3, [r4, #12]
 80039a6:	9a03      	ldr	r2, [sp, #12]
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	42ab      	cmp	r3, r5
 80039ac:	dcf2      	bgt.n	8003994 <_printf_i+0x1e8>
 80039ae:	e7eb      	b.n	8003988 <_printf_i+0x1dc>
 80039b0:	2500      	movs	r5, #0
 80039b2:	f104 0919 	add.w	r9, r4, #25
 80039b6:	e7f5      	b.n	80039a4 <_printf_i+0x1f8>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ac      	bne.n	8003916 <_printf_i+0x16a>
 80039bc:	7803      	ldrb	r3, [r0, #0]
 80039be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039c6:	e76c      	b.n	80038a2 <_printf_i+0xf6>
 80039c8:	08003e61 	.word	0x08003e61
 80039cc:	08003e72 	.word	0x08003e72

080039d0 <memchr>:
 80039d0:	b510      	push	{r4, lr}
 80039d2:	b2c9      	uxtb	r1, r1
 80039d4:	4402      	add	r2, r0
 80039d6:	4290      	cmp	r0, r2
 80039d8:	4603      	mov	r3, r0
 80039da:	d101      	bne.n	80039e0 <memchr+0x10>
 80039dc:	2300      	movs	r3, #0
 80039de:	e003      	b.n	80039e8 <memchr+0x18>
 80039e0:	781c      	ldrb	r4, [r3, #0]
 80039e2:	3001      	adds	r0, #1
 80039e4:	428c      	cmp	r4, r1
 80039e6:	d1f6      	bne.n	80039d6 <memchr+0x6>
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd10      	pop	{r4, pc}

080039ec <memcpy>:
 80039ec:	b510      	push	{r4, lr}
 80039ee:	1e43      	subs	r3, r0, #1
 80039f0:	440a      	add	r2, r1
 80039f2:	4291      	cmp	r1, r2
 80039f4:	d100      	bne.n	80039f8 <memcpy+0xc>
 80039f6:	bd10      	pop	{r4, pc}
 80039f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a00:	e7f7      	b.n	80039f2 <memcpy+0x6>

08003a02 <memmove>:
 8003a02:	4288      	cmp	r0, r1
 8003a04:	b510      	push	{r4, lr}
 8003a06:	eb01 0302 	add.w	r3, r1, r2
 8003a0a:	d807      	bhi.n	8003a1c <memmove+0x1a>
 8003a0c:	1e42      	subs	r2, r0, #1
 8003a0e:	4299      	cmp	r1, r3
 8003a10:	d00a      	beq.n	8003a28 <memmove+0x26>
 8003a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003a1a:	e7f8      	b.n	8003a0e <memmove+0xc>
 8003a1c:	4283      	cmp	r3, r0
 8003a1e:	d9f5      	bls.n	8003a0c <memmove+0xa>
 8003a20:	1881      	adds	r1, r0, r2
 8003a22:	1ad2      	subs	r2, r2, r3
 8003a24:	42d3      	cmn	r3, r2
 8003a26:	d100      	bne.n	8003a2a <memmove+0x28>
 8003a28:	bd10      	pop	{r4, pc}
 8003a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003a32:	e7f7      	b.n	8003a24 <memmove+0x22>

08003a34 <_free_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	4605      	mov	r5, r0
 8003a38:	2900      	cmp	r1, #0
 8003a3a:	d043      	beq.n	8003ac4 <_free_r+0x90>
 8003a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a40:	1f0c      	subs	r4, r1, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bfb8      	it	lt
 8003a46:	18e4      	addlt	r4, r4, r3
 8003a48:	f000 f8d0 	bl	8003bec <__malloc_lock>
 8003a4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ac8 <_free_r+0x94>)
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	4610      	mov	r0, r2
 8003a52:	b933      	cbnz	r3, 8003a62 <_free_r+0x2e>
 8003a54:	6063      	str	r3, [r4, #4]
 8003a56:	6014      	str	r4, [r2, #0]
 8003a58:	4628      	mov	r0, r5
 8003a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a5e:	f000 b8c6 	b.w	8003bee <__malloc_unlock>
 8003a62:	42a3      	cmp	r3, r4
 8003a64:	d90b      	bls.n	8003a7e <_free_r+0x4a>
 8003a66:	6821      	ldr	r1, [r4, #0]
 8003a68:	1862      	adds	r2, r4, r1
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	bf01      	itttt	eq
 8003a6e:	681a      	ldreq	r2, [r3, #0]
 8003a70:	685b      	ldreq	r3, [r3, #4]
 8003a72:	1852      	addeq	r2, r2, r1
 8003a74:	6022      	streq	r2, [r4, #0]
 8003a76:	6063      	str	r3, [r4, #4]
 8003a78:	6004      	str	r4, [r0, #0]
 8003a7a:	e7ed      	b.n	8003a58 <_free_r+0x24>
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	b10a      	cbz	r2, 8003a86 <_free_r+0x52>
 8003a82:	42a2      	cmp	r2, r4
 8003a84:	d9fa      	bls.n	8003a7c <_free_r+0x48>
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	1858      	adds	r0, r3, r1
 8003a8a:	42a0      	cmp	r0, r4
 8003a8c:	d10b      	bne.n	8003aa6 <_free_r+0x72>
 8003a8e:	6820      	ldr	r0, [r4, #0]
 8003a90:	4401      	add	r1, r0
 8003a92:	1858      	adds	r0, r3, r1
 8003a94:	4282      	cmp	r2, r0
 8003a96:	6019      	str	r1, [r3, #0]
 8003a98:	d1de      	bne.n	8003a58 <_free_r+0x24>
 8003a9a:	6810      	ldr	r0, [r2, #0]
 8003a9c:	6852      	ldr	r2, [r2, #4]
 8003a9e:	4401      	add	r1, r0
 8003aa0:	6019      	str	r1, [r3, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	e7d8      	b.n	8003a58 <_free_r+0x24>
 8003aa6:	d902      	bls.n	8003aae <_free_r+0x7a>
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	602b      	str	r3, [r5, #0]
 8003aac:	e7d4      	b.n	8003a58 <_free_r+0x24>
 8003aae:	6820      	ldr	r0, [r4, #0]
 8003ab0:	1821      	adds	r1, r4, r0
 8003ab2:	428a      	cmp	r2, r1
 8003ab4:	bf01      	itttt	eq
 8003ab6:	6811      	ldreq	r1, [r2, #0]
 8003ab8:	6852      	ldreq	r2, [r2, #4]
 8003aba:	1809      	addeq	r1, r1, r0
 8003abc:	6021      	streq	r1, [r4, #0]
 8003abe:	6062      	str	r2, [r4, #4]
 8003ac0:	605c      	str	r4, [r3, #4]
 8003ac2:	e7c9      	b.n	8003a58 <_free_r+0x24>
 8003ac4:	bd38      	pop	{r3, r4, r5, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000100 	.word	0x20000100

08003acc <_malloc_r>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	1ccd      	adds	r5, r1, #3
 8003ad0:	f025 0503 	bic.w	r5, r5, #3
 8003ad4:	3508      	adds	r5, #8
 8003ad6:	2d0c      	cmp	r5, #12
 8003ad8:	bf38      	it	cc
 8003ada:	250c      	movcc	r5, #12
 8003adc:	2d00      	cmp	r5, #0
 8003ade:	4606      	mov	r6, r0
 8003ae0:	db01      	blt.n	8003ae6 <_malloc_r+0x1a>
 8003ae2:	42a9      	cmp	r1, r5
 8003ae4:	d903      	bls.n	8003aee <_malloc_r+0x22>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	6033      	str	r3, [r6, #0]
 8003aea:	2000      	movs	r0, #0
 8003aec:	bd70      	pop	{r4, r5, r6, pc}
 8003aee:	f000 f87d 	bl	8003bec <__malloc_lock>
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <_malloc_r+0xac>)
 8003af4:	6814      	ldr	r4, [r2, #0]
 8003af6:	4621      	mov	r1, r4
 8003af8:	b991      	cbnz	r1, 8003b20 <_malloc_r+0x54>
 8003afa:	4c20      	ldr	r4, [pc, #128]	; (8003b7c <_malloc_r+0xb0>)
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	b91b      	cbnz	r3, 8003b08 <_malloc_r+0x3c>
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 f863 	bl	8003bcc <_sbrk_r>
 8003b06:	6020      	str	r0, [r4, #0]
 8003b08:	4629      	mov	r1, r5
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f000 f85e 	bl	8003bcc <_sbrk_r>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d124      	bne.n	8003b5e <_malloc_r+0x92>
 8003b14:	230c      	movs	r3, #12
 8003b16:	4630      	mov	r0, r6
 8003b18:	6033      	str	r3, [r6, #0]
 8003b1a:	f000 f868 	bl	8003bee <__malloc_unlock>
 8003b1e:	e7e4      	b.n	8003aea <_malloc_r+0x1e>
 8003b20:	680b      	ldr	r3, [r1, #0]
 8003b22:	1b5b      	subs	r3, r3, r5
 8003b24:	d418      	bmi.n	8003b58 <_malloc_r+0x8c>
 8003b26:	2b0b      	cmp	r3, #11
 8003b28:	d90f      	bls.n	8003b4a <_malloc_r+0x7e>
 8003b2a:	600b      	str	r3, [r1, #0]
 8003b2c:	18cc      	adds	r4, r1, r3
 8003b2e:	50cd      	str	r5, [r1, r3]
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 f85c 	bl	8003bee <__malloc_unlock>
 8003b36:	f104 000b 	add.w	r0, r4, #11
 8003b3a:	1d23      	adds	r3, r4, #4
 8003b3c:	f020 0007 	bic.w	r0, r0, #7
 8003b40:	1ac3      	subs	r3, r0, r3
 8003b42:	d0d3      	beq.n	8003aec <_malloc_r+0x20>
 8003b44:	425a      	negs	r2, r3
 8003b46:	50e2      	str	r2, [r4, r3]
 8003b48:	e7d0      	b.n	8003aec <_malloc_r+0x20>
 8003b4a:	684b      	ldr	r3, [r1, #4]
 8003b4c:	428c      	cmp	r4, r1
 8003b4e:	bf16      	itet	ne
 8003b50:	6063      	strne	r3, [r4, #4]
 8003b52:	6013      	streq	r3, [r2, #0]
 8003b54:	460c      	movne	r4, r1
 8003b56:	e7eb      	b.n	8003b30 <_malloc_r+0x64>
 8003b58:	460c      	mov	r4, r1
 8003b5a:	6849      	ldr	r1, [r1, #4]
 8003b5c:	e7cc      	b.n	8003af8 <_malloc_r+0x2c>
 8003b5e:	1cc4      	adds	r4, r0, #3
 8003b60:	f024 0403 	bic.w	r4, r4, #3
 8003b64:	42a0      	cmp	r0, r4
 8003b66:	d005      	beq.n	8003b74 <_malloc_r+0xa8>
 8003b68:	1a21      	subs	r1, r4, r0
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f000 f82e 	bl	8003bcc <_sbrk_r>
 8003b70:	3001      	adds	r0, #1
 8003b72:	d0cf      	beq.n	8003b14 <_malloc_r+0x48>
 8003b74:	6025      	str	r5, [r4, #0]
 8003b76:	e7db      	b.n	8003b30 <_malloc_r+0x64>
 8003b78:	20000100 	.word	0x20000100
 8003b7c:	20000104 	.word	0x20000104

08003b80 <_realloc_r>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	4607      	mov	r7, r0
 8003b84:	4614      	mov	r4, r2
 8003b86:	460e      	mov	r6, r1
 8003b88:	b921      	cbnz	r1, 8003b94 <_realloc_r+0x14>
 8003b8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b8e:	4611      	mov	r1, r2
 8003b90:	f7ff bf9c 	b.w	8003acc <_malloc_r>
 8003b94:	b922      	cbnz	r2, 8003ba0 <_realloc_r+0x20>
 8003b96:	f7ff ff4d 	bl	8003a34 <_free_r>
 8003b9a:	4625      	mov	r5, r4
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba0:	f000 f826 	bl	8003bf0 <_malloc_usable_size_r>
 8003ba4:	42a0      	cmp	r0, r4
 8003ba6:	d20f      	bcs.n	8003bc8 <_realloc_r+0x48>
 8003ba8:	4621      	mov	r1, r4
 8003baa:	4638      	mov	r0, r7
 8003bac:	f7ff ff8e 	bl	8003acc <_malloc_r>
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d0f2      	beq.n	8003b9c <_realloc_r+0x1c>
 8003bb6:	4631      	mov	r1, r6
 8003bb8:	4622      	mov	r2, r4
 8003bba:	f7ff ff17 	bl	80039ec <memcpy>
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	f7ff ff37 	bl	8003a34 <_free_r>
 8003bc6:	e7e9      	b.n	8003b9c <_realloc_r+0x1c>
 8003bc8:	4635      	mov	r5, r6
 8003bca:	e7e7      	b.n	8003b9c <_realloc_r+0x1c>

08003bcc <_sbrk_r>:
 8003bcc:	b538      	push	{r3, r4, r5, lr}
 8003bce:	2300      	movs	r3, #0
 8003bd0:	4c05      	ldr	r4, [pc, #20]	; (8003be8 <_sbrk_r+0x1c>)
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	6023      	str	r3, [r4, #0]
 8003bd8:	f7ff fb48 	bl	800326c <_sbrk>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d102      	bne.n	8003be6 <_sbrk_r+0x1a>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	b103      	cbz	r3, 8003be6 <_sbrk_r+0x1a>
 8003be4:	602b      	str	r3, [r5, #0]
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	20000188 	.word	0x20000188

08003bec <__malloc_lock>:
 8003bec:	4770      	bx	lr

08003bee <__malloc_unlock>:
 8003bee:	4770      	bx	lr

08003bf0 <_malloc_usable_size_r>:
 8003bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf4:	1f18      	subs	r0, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bfbc      	itt	lt
 8003bfa:	580b      	ldrlt	r3, [r1, r0]
 8003bfc:	18c0      	addlt	r0, r0, r3
 8003bfe:	4770      	bx	lr

08003c00 <_init>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr

08003c0c <_fini>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr
